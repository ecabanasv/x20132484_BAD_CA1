{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder\n\nIf you're coming here from [[@truffle/decoder]], you probably just want to\nknow about the parts that are relevant to you.  These are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder\n\nUnlike Truffle Decoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder works; @truffle/codec\nmakes requests, and @truffle/decoder fulfills them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder.  In particular, this library also exists to support Truffle\nDebugger, and so it provides encoding functionality not just for\ntransactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\nthat goes beyond what's currently available in @truffle/decoder; this may get\na better interface in the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] instead, if your use case doesn't\npreclude it.  This module has little documentation, where it has any at all,\nand it's likely that parts of its interface may change (particularly\nregarding allocation).  That said, if you truly need the functionality here,\nTruffle Decoder can perhaps serve as something of a reference implementation\n(and perhaps Truffle Debugger as well, though that code is much harder to\nread or copy).\n"
			},
			"originalName": "codec/lib",
			"children": [
				{
					"id": 1061,
					"name": "AbiData",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 1062,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1097,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 33,
											"character": 31
										}
									],
									"indexSignature": {
										"id": 1098,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1099,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "AbiAllocation"
												},
												{
													"type": "literal",
													"value": null
												}
											]
										}
									}
								},
								{
									"id": 1100,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1102,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 24,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1101,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 23,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1102,
												1101
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 22,
											"character": 28
										}
									]
								},
								{
									"id": 1132,
									"name": "BlankReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1136,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 187,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1135,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 186,
													"character": 11
												}
											],
											"type": {
												"type": "tuple"
											}
										},
										{
											"id": 1133,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 184,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "selfdestruct"
													},
													{
														"type": "literal",
														"value": "failure"
													}
												]
											}
										},
										{
											"id": 1134,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 185,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1136,
												1135,
												1133,
												1134
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 183,
											"character": 42
										}
									]
								},
								{
									"id": 1103,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1104,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 88,
													"character": 5
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 1107,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 91,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1106,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 90,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 1105,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 89,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1104,
												1107,
												1106,
												1105
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 87,
											"character": 35
										}
									]
								},
								{
									"id": 1122,
									"name": "ConstructorReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1127,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 180,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1126,
											"name": "delegatecallGuard",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 179,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1125,
											"name": "immutables",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 178,
													"character": 12
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturnImmutableAllocation"
												}
											}
										},
										{
											"id": 1123,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "bytecode"
											}
										},
										{
											"id": 1124,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 177,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1127,
												1126,
												1125,
												1123,
												1124
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 175,
											"character": 48
										}
									]
								},
								{
									"id": 1138,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1139,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 13,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi"
											}
										},
										{
											"id": 1145,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 19,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1144,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 18,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1638,
												"name": "CompilerVersion"
											}
										},
										{
											"id": 1142,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"id": 1727,
												"name": "Context"
											}
										},
										{
											"id": 1140,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										},
										{
											"id": 1141,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"id": 1727,
												"name": "Context"
											}
										},
										{
											"id": 1143,
											"name": "immutableReferences",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 17,
													"character": 21
												}
											],
											"type": {
												"type": "reference",
												"name": "ImmutableReferences"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1139,
												1145,
												1144,
												1142,
												1140,
												1141,
												1143
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 12,
											"character": 39
										}
									]
								},
								{
									"id": 1146,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1147,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 127,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "EventEntry"
											}
										},
										{
											"id": 1153,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 133,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1151,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 131,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1152,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 132,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 1148,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 128,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1149,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 129,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 1150,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 130,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1147,
												1153,
												1151,
												1152,
												1148,
												1149,
												1150
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 126,
											"character": 32
										}
									]
								},
								{
									"id": 1128,
									"name": "MessageReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1131,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 193,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1129,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 191,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "returnmessage"
											}
										},
										{
											"id": 1130,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 192,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1131,
												1129,
												1130
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 190,
											"character": 44
										}
									]
								},
								{
									"id": 1109,
									"name": "ReturnValueReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1113,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 160,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1112,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 159,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1110,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 157,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "return"
											}
										},
										{
											"id": 1111,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 158,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1113,
												1112,
												1110,
												1111
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 156,
											"character": 48
										}
									]
								},
								{
									"id": 1154,
									"name": "ReturndataAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 143,
											"character": 38
										}
									],
									"indexSignature": {
										"id": 1155,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1156,
												"name": "contextHash",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1157,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/abi-data/allocate/types.ts",
														"line": 144,
														"character": 24
													}
												],
												"indexSignature": {
													"id": 1158,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1159,
															"name": "selector",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1114,
															"name": "RevertReturndataAllocation"
														}
													}
												}
											}
										}
									}
								},
								{
									"id": 1114,
									"name": "RevertReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1117,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 166,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorEntry"
											}
										},
										{
											"id": 1121,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 172,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 879,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1120,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 171,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1119,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 168,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 1118,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 167,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1115,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 164,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "revert"
											}
										},
										{
											"id": 1116,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 165,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1117,
												1121,
												1120,
												1119,
												1118,
												1115,
												1116
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 163,
											"character": 43
										}
									]
								},
								{
									"id": 1137,
									"name": "CalldataAndReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 83,
											"character": 43
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionCalldataAndReturndataAllocation"
											},
											{
												"type": "reference",
												"name": "ConstructorCalldataAndReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1108,
									"name": "ReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 149,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1109,
												"name": "ReturnValueReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1114,
												"name": "RevertReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1122,
												"name": "ConstructorReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1128,
												"name": "MessageReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1132,
												"name": "BlankReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1160,
									"name": "FallbackOutputAllocation",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 75,
											"character": 37
										}
									],
									"type": {
										"type": "reference",
										"id": 1128,
										"name": "MessageReturndataAllocation"
									},
									"defaultValue": "..."
								},
								{
									"id": 1066,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 332,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1067,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 1068,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1069,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1100,
												"name": "AbiSizeInfo"
											}
										}
									]
								},
								{
									"id": 1063,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 81,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1064,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1065,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1097,
												"name": "AbiAllocations"
											}
										}
									]
								},
								{
									"id": 1070,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1026,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1071,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1072,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1138,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1073,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1074,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1028,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 1075,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1076,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1617,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1077,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1078,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									]
								},
								{
									"id": 1088,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1318,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 1089,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1090,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1138,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1091,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1092,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1320,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 1093,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1094,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1617,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1095,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1096,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									]
								},
								{
									"id": 1079,
									"name": "getReturndataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1124,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1080,
											"name": "getReturndataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1081,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1138,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1082,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1083,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1126,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 1084,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1085,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1617,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1086,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1087,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1154,
												"name": "ReturndataAllocations"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1097,
										1100,
										1132,
										1103,
										1122,
										1138,
										1146,
										1128,
										1109,
										1154,
										1114
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1137,
										1108
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1160
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1066,
										1063,
										1070,
										1088,
										1079
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1170,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1171,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 24,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1172,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1173,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1174,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1798,
														"name": "Pointer.AbiDataPointer"
													}
												},
												{
													"id": 1175,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1176,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1177,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 58,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 1178,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1179,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 262,
																"name": "Format.Types.ReferenceType"
															},
															{
																"type": "reference",
																"id": 202,
																"name": "Format.Types.TupleType"
															}
														]
													}
												},
												{
													"id": 1180,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1798,
																"name": "Pointer.AbiDataPointer"
															},
															{
																"type": "reference",
																"id": 1796,
																"name": "Pointer.StackFormPointer"
															}
														]
													}
												},
												{
													"id": 1181,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1182,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1183,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 312,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 1184,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1185,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 262,
																"name": "Format.Types.ReferenceType"
															},
															{
																"type": "reference",
																"id": 202,
																"name": "Format.Types.TupleType"
															}
														]
													}
												},
												{
													"id": 1186,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1798,
														"name": "Pointer.AbiDataPointer"
													}
												},
												{
													"id": 1187,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1188,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1171,
										1177,
										1183
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1161,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1162,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1163,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1164,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												},
												{
													"id": 1165,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1166,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1167,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1168,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 268,
															"name": "Format.Values.Result"
														}
													}
												},
												{
													"id": 1169,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1097,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1162,
										1166
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1162,
												1166
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1189,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1190,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 14,
											"character": 34
										}
									],
									"signatures": [
										{
											"id": 1191,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1192,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1190
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1193,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1227,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 11,
											"character": 36
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi.ConstructorEntry"
									},
									"defaultValue": "..."
								},
								{
									"id": 1224,
									"name": "abiEntryHasStorageParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 187,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 1225,
											"name": "abiEntryHasStorageParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1226,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1221,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 143,
											"character": 43
										}
									],
									"signatures": [
										{
											"id": 1222,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1223,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1197,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 35,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 1198,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1199,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1206,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 72,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1207,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1208,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.FunctionEntry"
															},
															{
																"type": "reference",
																"name": "Abi.EventEntry"
															},
															{
																"type": "reference",
																"name": "Abi.ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1200,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 49,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1201,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1202,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.FunctionEntry"
															},
															{
																"type": "reference",
																"name": "Abi.EventEntry"
															},
															{
																"type": "reference",
																"name": "Abi.ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1203,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 55,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1204,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1205,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Abi.Parameter"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1209,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 89,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1210,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1211,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1212,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1194,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 18,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1195,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1196,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1228,
														"name": "FunctionAbiBySelectors"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1213,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 121,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1214,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1215,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												},
												{
													"id": 1216,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "Ast.AstNode"
													}
												},
												{
													"id": 1217,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1617,
														"name": "Ast.AstNodes"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1218,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 136,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1219,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1220,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.EventEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1227
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1224,
										1221,
										1197,
										1206,
										1200,
										1203,
										1209,
										1194,
										1213,
										1218
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1228,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 39
								}
							],
							"indexSignature": {
								"id": 1229,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1230,
										"name": "selector",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "FunctionEntry"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1062,
								1170,
								1161,
								1189,
								1193
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1228
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abi-data/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1445,
					"name": "Ast",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1554,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1561,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 366,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1562,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1563,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1564,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1565,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1638,
														"name": "Compiler.CompilerVersion"
													}
												},
												{
													"id": 1566,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1617,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 172,
												"name": "Format.Types.UserDefinedType"
											}
										}
									]
								},
								{
									"id": 1555,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 27,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1556,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1557,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1558,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1559,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1638,
														"name": "Compiler.CompilerVersion"
													}
												},
												{
													"id": 1560,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1939,
																"name": "Common.Location"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1561,
										1555
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1446,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1520,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 298,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1521,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1522,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1501,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 213,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1502,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1503,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1942,
												"name": "Common.ContractKind"
											}
										}
									]
								},
								{
									"id": 1471,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 129,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1472,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1473,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1543,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 531,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1544,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 1545,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1546,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1617,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Abi.Entry"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1534,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 468,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1535,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 1536,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1547,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 804,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1548,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1549,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1550,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1617,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1551,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1552,
															"name": "inputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 11
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1570,
																	"name": "AstNode"
																}
															}
														},
														{
															"id": 1553,
															"name": "outputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 31
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1570,
																	"name": "AstNode"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1552,
																1553
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 807,
															"character": 2
														}
													]
												}
											}
										}
									]
								},
								{
									"id": 1474,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 136,
											"character": 23
										}
									],
									"signatures": [
										{
											"id": 1475,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1476,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1540,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 518,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1541,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 1542,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1477,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 141,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1478,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1479,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1492,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 186,
											"character": 22
										}
									],
									"signatures": [
										{
											"id": 1493,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1494,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1489,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 181,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1490,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1491,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1495,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 191,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1496,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1497,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1507,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 243,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1508,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1509,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1486,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 176,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1487,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1488,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1523,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 330,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1524,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 1525,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1526,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1620,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1537,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 489,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1538,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 1539,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1941,
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1531,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 451,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1532,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 1533,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													}
												]
											}
										}
									]
								},
								{
									"id": 1517,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 290,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1518,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1519,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1498,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 203,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1499,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1500,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Common.Location"
											}
										}
									]
								},
								{
									"id": 1514,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 277,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1515,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1516,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1468,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 95,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1469,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1470,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1510,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 253,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1511,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1512,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1513,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1939,
														"name": "Common.Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1504,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 221,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1505,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type"
											},
											"parameters": [
												{
													"id": 1506,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1480,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1481,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1482,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1483,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 169,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1484,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1485,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1456,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 43,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1457,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1458,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1459,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 57,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1460,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1461,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1462,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 67,
											"character": 22
										}
									],
									"signatures": [
										{
											"id": 1463,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1464,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1447,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1448,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1449,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1450,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1451,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1452,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1453,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 1454,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1455,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1527,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 397,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1528,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 1529,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												},
												{
													"id": 1530,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1620,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1465,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 82,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1466,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1467,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1570,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1940,
												"name": "Common.Visibility"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1520,
										1501,
										1471,
										1543,
										1534,
										1547,
										1474,
										1540,
										1477,
										1492,
										1489,
										1495,
										1507,
										1486,
										1523,
										1537,
										1531,
										1517,
										1498,
										1514,
										1468,
										1510,
										1504,
										1480,
										1483,
										1456,
										1459,
										1462,
										1447,
										1450,
										1453,
										1527,
										1465
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1520,
												1501,
												1471,
												1534,
												1474,
												1540,
												1477,
												1492,
												1489,
												1495,
												1507,
												1486,
												1523,
												1537,
												1531,
												1517,
												1498,
												1514,
												1468,
												1510,
												1504,
												1480,
												1483,
												1456,
												1459,
												1462,
												1447,
												1450,
												1453,
												1527,
												1465
											]
										},
										{
											"title": "Other",
											"children": [
												1543,
												1547
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1570,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1613,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1580,
									"name": "ast_type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1608,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1575,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1571,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1614,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 54,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1942,
										"name": "ContractKind"
									}
								},
								{
									"id": 1587,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 25,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1588,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1589,
													"name": "referencedDeclaration",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 26,
															"character": 25
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1589
													]
												}
											]
										}
									}
								},
								{
									"id": 1594,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1573,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1612,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1615,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 55,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1609,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1593,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1576,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1577,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1570,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1572,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "mutable"
											},
											{
												"type": "literal",
												"value": "immutable"
											},
											{
												"type": "literal",
												"value": "constant"
											}
										]
									}
								},
								{
									"id": 1574,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1579,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1578,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1570,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1602,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1603,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1604,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 43,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1604
													]
												}
											]
										}
									}
								},
								{
									"id": 1596,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 36,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1597,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1598,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 37,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1598
													]
												}
											]
										}
									}
								},
								{
									"id": 1611,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1595,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 35,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1605,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 45,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1606,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1607,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 46,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1607
													]
												}
											]
										}
									}
								},
								{
									"id": 1599,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1600,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1601,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 40,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1570,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1601
													]
												}
											]
										}
									}
								},
								{
									"id": 1581,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1582,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 5
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1592,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 32,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 1941,
										"name": "Mutability"
									}
								},
								{
									"id": 1583,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1584,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1585,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 1567,
										"name": "TypeDescriptions"
									}
								},
								{
									"id": 1586,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1616,
									"name": "usedErrors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 56,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1590,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 28,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1610,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1591,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1613,
										1580,
										1608,
										1575,
										1571,
										1614,
										1587,
										1594,
										1573,
										1612,
										1615,
										1609,
										1593,
										1576,
										1577,
										1572,
										1574,
										1579,
										1578,
										1602,
										1596,
										1611,
										1595,
										1605,
										1599,
										1581,
										1582,
										1592,
										1583,
										1584,
										1585,
										1586,
										1616,
										1590,
										1610,
										1591
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 24
								}
							]
						},
						{
							"id": 1617,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 62,
									"character": 25
								}
							],
							"indexSignature": {
								"id": 1618,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1619,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1570,
									"name": "AstNode"
								}
							}
						},
						{
							"id": 1620,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 67,
									"character": 23
								}
							],
							"indexSignature": {
								"id": 1621,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1622,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 1623,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1632,
												"name": "definition",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 77,
														"character": 14
													}
												],
												"type": {
													"type": "reference",
													"id": 1570,
													"name": "AstNode"
												}
											},
											{
												"id": 1624,
												"name": "id",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 69,
														"character": 6
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											{
												"id": 1626,
												"name": "parentId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 71,
														"character": 12
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "literal",
															"value": null
														}
													]
												}
											},
											{
												"id": 1627,
												"name": "pointer",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 72,
														"character": 11
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1625,
												"name": "sourceId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 70,
														"character": 12
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1628,
												"name": "variables",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 73,
														"character": 13
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "reflection",
														"declaration": {
															"id": 1629,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1631,
																	"name": "id",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 75,
																			"character": 8
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 1630,
																	"name": "name",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 74,
																			"character": 10
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1631,
																		1630
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 73,
																	"character": 15
																}
															]
														}
													}
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													1632,
													1624,
													1626,
													1627,
													1625,
													1628
												]
											}
										],
										"sources": [
											{
												"fileName": "codec/lib/ast/types.ts",
												"line": 68,
												"character": 19
											}
										]
									}
								}
							}
						},
						{
							"id": 1567,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1568,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1569,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1568,
										1569
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1554,
								1446
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1570,
								1617,
								1620,
								1567
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1434,
					"name": "AstConstant",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1439,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1440,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 19,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1441,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1442,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1443,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1838,
														"name": "Pointer.ConstantDefinitionPointer"
													}
												},
												{
													"id": 1444,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1440
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1435,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1436,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 17,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1437,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1438,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1838,
														"name": "Pointer.ConstantDefinitionPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1436
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1439,
								1435
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast-constant/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 998,
					"name": "Basic",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 1032,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1033,
									"name": "byteLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 9,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1034,
											"name": "byteLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1035,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1036,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1033
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 999,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1021,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 751,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1022,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1023,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1024,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1000,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 15,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1001,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1002,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1003,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1795,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1004,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1005,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1006,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 455,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1007,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1008,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1009,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 495,
														"name": "Format.Values.ContractValueInfo"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1010,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 498,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 1011,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1012,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1013,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1014,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 371,
														"name": "Format.Values.FunctionExternalValueInfo"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1015,
									"name": "decodeInternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 537,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1016,
											"name": "decodeInternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1017,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 147,
														"name": "Format.Types.FunctionInternalType"
													}
												},
												{
													"id": 1018,
													"name": "deployedPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1019,
													"name": "constructorPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1020,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 388,
												"name": "Format.Values.FunctionInternalResult"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1021,
										1000,
										1006,
										1010,
										1015
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1028,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1029,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1030,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 1031,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 270,
														"name": "Format.Values.Value"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1029
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1029
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1032,
								999,
								1028
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/basic/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1037,
					"name": "Bytes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 1047,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1048,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1049,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1050,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 91,
																"name": "Format.Types.BytesTypeDynamic"
															},
															{
																"type": "reference",
																"id": 109,
																"name": "Format.Types.StringType"
															}
														]
													}
												},
												{
													"id": 1051,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1795,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1052,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1053,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1054,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 56,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1055,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1056,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 468,
												"name": "Format.Values.StringValueInfo"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1048,
										1054
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1057,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1058,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 14,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1059,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 1060,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 448,
																"name": "Format.Values.BytesDynamicValue"
															},
															{
																"type": "reference",
																"id": 463,
																"name": "Format.Values.StringValue"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1058
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1058
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1038,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1043,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 20,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1044,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1045,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1799,
														"name": "Pointer.BytesPointer"
													}
												},
												{
													"id": 1046,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1039,
									"name": "readCode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 6,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1040,
											"name": "readCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1041,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1828,
														"name": "Pointer.CodePointer"
													}
												},
												{
													"id": 1042,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1043,
										1039
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1047,
								1057,
								1038
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/bytes/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1642,
					"name": "Compilations",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1643,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1661,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 239,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1662,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1663,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1681,
														"name": "Contract"
													}
												},
												{
													"id": 1664,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1668,
														"name": "Compilation"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "Ast.AstNode"
											}
										}
									]
								},
								{
									"id": 1652,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 45,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1653,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "wrapper around shimContracts that just returns\nthe result in a one-element array (keeping the old name\nshimArtifacts for compatibility)"
											},
											"parameters": [
												{
													"id": 1654,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Artifact"
																},
																{
																	"type": "reference",
																	"name": "Common.CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1655,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 1656,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1668,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1648,
									"name": "shimCompilation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 25,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1649,
											"name": "shimCompilation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1650,
													"name": "inputCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Compilation"
													}
												},
												{
													"id": 1651,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "reference",
												"id": 1668,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1644,
									"name": "shimCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 13,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1645,
											"name": "shimCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1646,
													"name": "inputCompilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Common.Compilation"
														}
													}
												},
												{
													"id": 1647,
													"name": "shimmedCompilationIdPrefix",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1668,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1657,
									"name": "shimContracts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 68,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1658,
											"name": "shimContracts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "shims a bunch of contracts (\"artifacts\", though not necessarily)\nto a compilation.  usually used via one of the above functions.\nNote: if you pass in options.sources, options.files will be ignored.\nNote: if you pass in options.sources, sources will not have\ncompiler set unless you also pass in options.compiler; in this case\nyou should set that up separately, as in shimCompilation()."
											},
											"parameters": [
												{
													"id": 1659,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Artifact"
																},
																{
																	"type": "reference",
																	"name": "Common.CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1660,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilationOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"id": 1668,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1665,
									"name": "simpleShimSourceMap",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 427,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 1666,
											"name": "simpleShimSourceMap",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert Vyper source maps to solidity ones\n(note we won't bother handling the case where the compressed\nversion doesn't exist; that will have to wait for a later version)"
											},
											"parameters": [
												{
													"id": 1667,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"id": 1693,
																"name": "VyperSourceMap"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1661,
										1652,
										1648,
										1644,
										1657,
										1665
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1668,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 1673,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 44,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1638,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1672,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 38,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1681,
											"name": "Contract"
										}
									}
								},
								{
									"id": 1669,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 21,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1671,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 34,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1674,
											"name": "Source"
										}
									}
								},
								{
									"id": 1670,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 28,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1673,
										1672,
										1669,
										1671,
										1670
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 17,
									"character": 28
								}
							]
						},
						{
							"id": 1681,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 1687,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 113,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1683,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 95,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1689,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 124,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1638,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1682,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 89,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1684,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 101,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1692,
									"name": "deployedGeneratedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 138,
											"character": 26
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1674,
											"name": "Source"
										}
									}
								},
								{
									"id": 1686,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 109,
											"character": 19
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1693,
												"name": "VyperSourceMap"
											}
										]
									}
								},
								{
									"id": 1691,
									"name": "generatedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 133,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1674,
											"name": "Source"
										}
									}
								},
								{
									"id": 1688,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's immutable references object as output by Solidity 0.6.5\nor later."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 118,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1690,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 128,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1685,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 105,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1693,
												"name": "VyperSourceMap"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1687,
										1683,
										1689,
										1682,
										1684,
										1692,
										1686,
										1691,
										1688,
										1690,
										1685
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 85,
									"character": 25
								}
							]
						},
						{
							"id": 1674,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 1679,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 73,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1680,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 79,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1638,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1675,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 55,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1678,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The language for the source file.  For compatibility purposes, this may technicaly\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 69,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1677,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 64,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1676,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path.  If internal is true, will not be a real file path but\nrather just an arbitrary name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 60,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1679,
										1680,
										1675,
										1678,
										1677,
										1676
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 50,
									"character": 23
								}
							]
						},
						{
							"id": 1693,
							"name": "VyperSourceMap",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1694,
									"name": "pc_jump_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 144,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1695,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1696,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1697,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "literal",
															"value": "-"
														},
														{
															"type": "literal",
															"value": "i"
														},
														{
															"type": "literal",
															"value": "o"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1698,
									"name": "pc_pos_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 147,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1699,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1700,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1701,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "tuple",
													"elements": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1702,
									"name": "pc_pos_map_compressed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 150,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1694,
										1698,
										1702
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 141,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1643
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1668,
								1681,
								1674,
								1693
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compilations/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1633,
					"name": "Compiler",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1634,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1635,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1636,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1637,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1638,
														"name": "CompilerVersion"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1641,
												"name": "SolidityFamily"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1635
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1638,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1639,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1640,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1639,
										1640
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 32
								}
							]
						},
						{
							"id": 1641,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 11,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unknown"
									},
									{
										"type": "literal",
										"value": "pre-0.5.0"
									},
									{
										"type": "literal",
										"value": "0.5.x"
									},
									{
										"type": "literal",
										"value": "0.8.x"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1634
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1638
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1641
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compiler/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1703,
					"name": "Contexts",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1704,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1705,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1706,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1707,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1727,
														"name": "Context"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"name": "Format.Types.ContractType"
											}
										}
									]
								},
								{
									"id": 1708,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 29,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1709,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1710,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1711,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1705,
										1708
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1712,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1713,
									"name": "findContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 10,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1714,
											"name": "findContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1715,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1724,
														"name": "Contexts"
													}
												},
												{
													"id": 1716,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1727,
														"name": "Context"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										}
									]
								},
								{
									"id": 1717,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 37,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1718,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1719,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1727,
														"name": "Context"
													}
												},
												{
													"id": 1720,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1721,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 66,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1722,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1723,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1724,
														"name": "Contexts"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1713,
										1717,
										1721
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1727,
							"name": "Context",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1736,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 22,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1228,
										"name": "FunctionAbiBySelectors"
									}
								},
								{
									"id": 1729,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 13,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1743,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 30,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1742,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 29,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1638,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1728,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 12,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1733,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1735,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 21,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1942,
										"name": "ContractKind"
									}
								},
								{
									"id": 1732,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 18,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1738,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1739,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1740,
													"name": "fallback",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 26,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "FallbackEntry"
													}
												},
												{
													"id": 1741,
													"name": "receive",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 27,
															"character": 11
														}
													],
													"type": {
														"type": "reference",
														"name": "ReceiveEntry"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1740,
														1741
													]
												}
											]
										}
									}
								},
								{
									"id": 1731,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 17,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1730,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 16,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1734,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 20,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1737,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1736,
										1729,
										1743,
										1742,
										1728,
										1733,
										1735,
										1732,
										1738,
										1731,
										1730,
										1734,
										1737
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 11,
									"character": 24
								}
							]
						},
						{
							"id": 1724,
							"name": "Contexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 7,
									"character": 25
								}
							],
							"indexSignature": {
								"id": 1725,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1726,
										"name": "context",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1727,
									"name": "Context"
								}
							}
						},
						{
							"id": 1744,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1753,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1746,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 37,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1757,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1756,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 49,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1638,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1745,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 36,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1750,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 43,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1752,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 45,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1942,
										"name": "ContractKind"
									}
								},
								{
									"id": 1749,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 42,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1748,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 41,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1747,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 40,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1751,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 44,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1758,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1755,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 48,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1754,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1753,
										1746,
										1757,
										1756,
										1745,
										1750,
										1752,
										1749,
										1748,
										1747,
										1751,
										1758,
										1755,
										1754
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 35,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1704,
								1712
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1727,
								1724,
								1744
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/contexts/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1759,
					"name": "Conversion",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1791,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 181,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 1792,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1793,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 272,
												"name": "Format.Values.ElementaryResult"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 272,
										"name": "Format.Values.ElementaryResult"
									}
								}
							]
						},
						{
							"id": 1788,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 173,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1789,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1790,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 1784,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 166,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 1785,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1786,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1787,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1780,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 159,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1781,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1782,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1783,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1760,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 12,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 1761,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1762,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							]
						},
						{
							"id": 1769,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 57,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 1770,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1771,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1766,
							"name": "toBigInt",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 49,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1767,
									"name": "toBigInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1768,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BigInt"
									}
								}
							]
						},
						{
							"id": 1776,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 101,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1777,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1778,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 1779,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							]
						},
						{
							"id": 1772,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 68,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1773,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1774,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array | BN"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "BN"
													}
												]
											}
										},
										{
											"id": 1775,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 1763,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 38,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1764,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1765,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1791,
								1788,
								1784,
								1780,
								1760,
								1769,
								1766,
								1776,
								1772,
								1763
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/conversion.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1846,
					"name": "Evm",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1864,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1865,
									"name": "functionTableEntryToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 6,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1866,
											"name": "functionTableEntryToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1867,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1906,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 227,
												"name": "Format.Types.ContractTypeNative"
											}
										}
									]
								},
								{
									"id": 1868,
									"name": "makeInternalFunctionId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 23,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1869,
											"name": "makeInternalFunctionId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1870,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1906,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1865,
										1868
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1847,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1859,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 25
										}
									],
									"type": {
										"type": "literal",
										"value": 20
									},
									"defaultValue": "20"
								},
								{
									"id": 1862,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									},
									"defaultValue": "..."
								},
								{
									"id": 1861,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 20
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "4"
								},
								{
									"id": 1860,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 26
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "4"
								},
								{
									"id": 1858,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "literal",
										"value": 32
									},
									"defaultValue": "0x20"
								},
								{
									"id": 1863,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								},
								{
									"id": 1851,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1852,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1853,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1854,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1848,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1849,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1850,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1855,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1856,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1857,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1859,
										1862,
										1861,
										1860,
										1858,
										1863
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1851,
										1848,
										1855
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1895,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1898,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1097,
										"name": "AbiAllocations"
									}
								},
								{
									"id": 1899,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 1901,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 52,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 1897,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 1264,
										"name": "MemoryAllocations"
									}
								},
								{
									"id": 1900,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 51,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1154,
										"name": "ReturndataAllocations"
									}
								},
								{
									"id": 1902,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 53,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1371,
										"name": "StateAllocations"
									}
								},
								{
									"id": 1896,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1362,
										"name": "StorageAllocations"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1898,
										1899,
										1901,
										1897,
										1900,
										1902,
										1896
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 46,
									"character": 31
								}
							]
						},
						{
							"id": 1887,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1891,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 1895,
										"name": "AllocationInfo"
									}
								},
								{
									"id": 1892,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1724,
										"name": "Contexts"
									}
								},
								{
									"id": 1893,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 1727,
										"name": "Context"
									}
								},
								{
									"id": 1894,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 43,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 1903,
										"name": "InternalFunctions"
									}
								},
								{
									"id": 1889,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1427,
											"typeArguments": [
												{
													"type": "reference",
													"id": 793,
													"name": "DefaultConfig"
												}
											],
											"name": "Slot"
										}
									}
								},
								{
									"id": 1888,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "EvmState"
									}
								},
								{
									"id": 1890,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1891,
										1892,
										1893,
										1894,
										1889,
										1888,
										1890
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 36,
									"character": 24
								}
							]
						},
						{
							"id": 1871,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1875,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1876,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1881,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1882,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 28,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1874,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1883,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1877,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1878,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1879,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1880,
														"name": "builtin",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"name": "Uint8Array"
												}
											}
										}
									}
								},
								{
									"id": 1873,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1872,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1884,
										"name": "WordMapping"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1875,
										1876,
										1881,
										1882,
										1874,
										1883,
										1877,
										1873,
										1872
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 18,
									"character": 25
								}
							]
						},
						{
							"id": 1906,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1908,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1917,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 71,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1918,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 72,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1942,
										"name": "ContractKind"
									}
								},
								{
									"id": 1916,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1915,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1919,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 73,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1914,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1912,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1920,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 74,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1913,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1941,
										"name": "Mutability"
									}
								},
								{
									"id": 1911,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1910,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1909,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1907,
									"name": "sourceIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1908,
										1917,
										1918,
										1916,
										1915,
										1919,
										1914,
										1912,
										1920,
										1913,
										1911,
										1910,
										1909,
										1907
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 60,
									"character": 33
								}
							]
						},
						{
							"id": 1903,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 56,
									"character": 34
								}
							],
							"indexSignature": {
								"id": 1904,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1905,
										"name": "pc",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1906,
									"name": "InternalFunction"
								}
							}
						},
						{
							"id": 1884,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 32,
									"character": 28
								}
							],
							"indexSignature": {
								"id": 1885,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1886,
										"name": "slotAddress",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "Uint8Array"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1864,
								1847
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1895,
								1887,
								1871,
								1906,
								1903,
								1884
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/evm/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1921,
					"name": "Export",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1936,
							"name": "NativizeOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Options for the nativize function."
							},
							"children": [
								{
									"id": 1938,
									"name": "format",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The format for the nativized result.  Currently the only supported\nformat is \"ethers\", which nativizes things in a way compatible with how\nEthers decodes values.  This format is quite limited, but more may be\nadded in the future.  There is also the separate function\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], although that is,\nas noted, unsafe."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 42,
											"character": 8
										}
									],
									"type": {
										"type": "literal",
										"value": "ethers"
									}
								},
								{
									"id": 1937,
									"name": "numberFormatter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This is a function that is used to describe how to format\ninteger values.  It should take as input the number as a BigInt.\nBy default, it's the identity function (i.e., it formats the numbers\nas BigInts), but by setting it you could instead format numbers as\na BN, BigNumber, string, etc."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 33,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "NumberFormatter"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1938,
										1937
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 25,
									"character": 32
								}
							]
						},
						{
							"id": 1922,
							"name": "nativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 74,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1923,
									"name": "nativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\nbe safe, and also allows for different output formats.  The only currently\nsupported format is \"ethers\", which is intended to match the way that\nTruffle Contract currently returns values (based on the Ethers decoder).  As\nsuch, it only handles ABI types, and in addition does not handle the types\nfixed, ufixed, or function.  Note that in these cases it returns `undefined`\nrather than throwing, as we want this function to be used in contexts where\nit had better not throw.  It also does not handle circularities, for similar\nreasons.",
										"text": "To handle numeric types, this function takes an optional numberFormatter\noption that tells it how to handle numbers; this function should take a\nBigInt as input.  By default, this function will be the identity, and so\nnumbers will be represented as BigInts.\n\nNote that this function begins by calling abify, so out-of-range enums (that\naren't so out-of-range as to be padding errors) will not return `undefined`.\nOut-of-range booleans similarly will return true rather than `undefined`.\nHowever, other range errors may return `undefined`; this may technically be a\nslight incompatibility with existing behavior, but should not be relevant\nexcept in quite unusual cases.\n\nIn order to match the behavior for tuples, tuples will be transformed into\narrays, but named entries will additionally be keyed by name.  Moreover,\nindexed variables of reference type will be nativized to an undecoded hex\nstring.\n"
									},
									"parameters": [
										{
											"id": 1924,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 268,
												"name": "Format.Values.Result"
											}
										},
										{
											"id": 1925,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1936,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1930,
							"name": "nativizeEventArgs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 233,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 1931,
									"name": "nativizeEventArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[compatibleNativize]], but takes\na [[LogDecoding]], and puts the results in an object.  Note\nthat this does not return the entire event info, but just the\n`args` for the event."
									},
									"parameters": [
										{
											"id": 1932,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 882,
												"name": "LogDecoding"
											}
										},
										{
											"id": 1933,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1936,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1926,
							"name": "nativizeReturn",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 187,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 1927,
									"name": "nativizeReturn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[nativize]], but takes\na [[ReturndataDecoding]].  If there's only one returned value, it\nwill be run through compatibleNativize but otherwise unaltered;\notherwise the results will be put in an object.",
										"text": "Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\nthis will just return `undefined`.\n"
									},
									"parameters": [
										{
											"id": 1928,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 883,
												"name": "ReturndataDecoding"
											}
										},
										{
											"id": 1929,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1936,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1936
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1922,
								1930,
								1926
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/export.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 45,
					"name": "Format",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://solidity.readthedocs.io) and\nthe [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.nativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n  1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\n    type.  Each `Type` has a `typeClass` field describing the overall broad type,\n    such as `\"uint\"` or `\"bytes\"`, together with additional information that gives\n    the specific type.  For full detail, see [[Format.Types]].\n\n  2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n    [[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n    [[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\n    a `value` field containin the decoded value.  In the latter case, there will be\n    an `error` field indicating what went wrong.  *Warning*: When decoding a\n    complex type, such as an array, mapping, or array, getting a kind of `\"value\"`\n    does not necessarily mean the individual elements were decoded successfully.\n    Even if the `Result` for the array (mapping, struct) as a whole has kind\n    `\"value\"`, the elements might still have kind `\"error\"`.\n\n  3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\n    It contains information about the actual decoded value.  See\n    [[Format.Values|`Format.Values`]] for more information.\n\n  4. `error`: The alternative to `value`.  Generally includes information about\n    the raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\n    more information.\n\n  5. `reference`: This field is a debugger-only feature and does not\n     apply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n  - A variable of contract type whose address does not actually hold a\n    contract of that type;\n  - An external function pointer that does not correspond to a valid\n    function;\n  - A string containing invalid UTF-8;\n  - ..., etc.\n\nBy contrast, the following *are* errors:\n  - A `bool` which is neither `false` (0) nor `true` (1);\n  - An `enum` which is out of range;\n  - ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 507,
							"name": "Errors",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 575,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an address"
									},
									"children": [
										{
											"id": 578,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 307,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 580,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "AddressError"
													}
												]
											}
										},
										{
											"id": 577,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 306,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 576,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 305,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 97,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												578,
												577,
												576
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 302,
											"character": 35
										}
									],
									"typeParameter": [
										{
											"id": 579,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 582,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"children": [
										{
											"id": 584,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 331,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 585,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 332,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 583,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 330,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												584,
												585,
												583
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 324,
											"character": 36
										}
									],
									"typeParameter": [
										{
											"id": 586,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 647,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an array"
									},
									"children": [
										{
											"id": 650,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 559,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 776,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 778,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 649,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 558,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 648,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 557,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 126,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												650,
												649,
												648
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 554,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 651,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 540,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"children": [
										{
											"id": 543,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 191,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 547,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "BoolOutOfRangeError"
													},
													{
														"type": "reference",
														"id": 551,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "BoolPaddingError"
													}
												]
											}
										},
										{
											"id": 542,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 190,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 541,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 189,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 79,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												543,
												542,
												541
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 186,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 544,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 549,
									"name": "BoolOutOfRangeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 550,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 213,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolOutOfRangeError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												550
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 212,
											"character": 46
										}
									]
								},
								{
									"id": 551,
									"name": "BoolPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a boolean"
									},
									"children": [
										{
											"id": 553,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 237,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolPaddingError"
											}
										},
										{
											"id": 554,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 238,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 552,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 236,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												553,
												554,
												552
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 230,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 555,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 568,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 571,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 285,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 776,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 778,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 570,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 284,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 569,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 283,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 91,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeDynamic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												571,
												570,
												569
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 280,
											"character": 40
										}
									],
									"typeParameter": [
										{
											"id": 572,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 563,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"children": [
										{
											"id": 565,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 271,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 566,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 272,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 564,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 270,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												565,
												566,
												564
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 266,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 567,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									]
								},
								{
									"id": 556,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"children": [
										{
											"id": 559,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 251,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 561,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "BytesStaticError"
													}
												]
											}
										},
										{
											"id": 558,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 250,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 557,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 249,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 85,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeStatic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												559,
												558,
												557
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 246,
											"character": 39
										}
									],
									"typeParameter": [
										{
											"id": 560,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 635,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"children": [
										{
											"id": 638,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 517,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 640,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ContractError"
													}
												]
											}
										},
										{
											"id": 637,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 516,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 636,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 515,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												638,
												637,
												636
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 512,
											"character": 36
										}
									],
									"typeParameter": [
										{
											"id": 639,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 642,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"children": [
										{
											"id": 644,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 541,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 645,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 542,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 643,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 540,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												644,
												645,
												643
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 534,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 646,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 724,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"children": [
										{
											"id": 728,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 819,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 726,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 817,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 727,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 818,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 725,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 816,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												728,
												726,
												727,
												725
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 813,
											"character": 51
										}
									],
									"typeParameter": [
										{
											"id": 729,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 618,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"children": [
										{
											"id": 621,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 446,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 625,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "EnumOutOfRangeError"
													},
													{
														"type": "reference",
														"id": 627,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "EnumPaddingError"
													},
													{
														"type": "reference",
														"id": 633,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "EnumNotFoundDecodingError"
													}
												]
											}
										},
										{
											"id": 620,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 445,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 619,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 444,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												621,
												620,
												619
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 441,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 622,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 627,
									"name": "EnumPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an enum"
									},
									"children": [
										{
											"id": 630,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 487,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumPaddingError"
											}
										},
										{
											"id": 631,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 488,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 628,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 485,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 629,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 486,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												630,
												631,
												628,
												629
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 479,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 632,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 594,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"children": [
										{
											"id": 597,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 367,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 604,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "FixedError"
													}
												]
											}
										},
										{
											"id": 596,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 366,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 595,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 365,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 114,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												597,
												596,
												595
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 362,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 598,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 606,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 608,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 403,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 609,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 404,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 607,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 402,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												608,
												609,
												607
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 396,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 610,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 689,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"children": [
										{
											"id": 692,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 696,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 696,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "FunctionExternalNonStackPaddingError"
													},
													{
														"type": "reference",
														"id": 701,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "FunctionExternalStackPaddingError"
													}
												]
											}
										},
										{
											"id": 691,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 695,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 690,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 694,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 154,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												692,
												691,
												690
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 691,
											"character": 44
										}
									],
									"typeParameter": [
										{
											"id": 693,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 696,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"children": [
										{
											"id": 698,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 722,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 699,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 723,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 697,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 721,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												698,
												699,
												697
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 715,
											"character": 53
										}
									],
									"typeParameter": [
										{
											"id": 700,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 701,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"children": [
										{
											"id": 704,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 742,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 702,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 737,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 703,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 741,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												704,
												702,
												703
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 731,
											"character": 50
										}
									],
									"typeParameter": [
										{
											"id": 705,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 706,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"children": [
										{
											"id": 709,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 759,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 713,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "FunctionInternalPaddingError"
													},
													{
														"type": "reference",
														"id": 718,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "NoSuchInternalFunctionError"
													},
													{
														"type": "reference",
														"id": 724,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "DeployedFunctionInConstructorError"
													},
													{
														"type": "reference",
														"id": 730,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "MalformedInternalFunctionError"
													}
												]
											}
										},
										{
											"id": 708,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 758,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 707,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 757,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 147,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												709,
												708,
												707
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 754,
											"character": 44
										}
									],
									"typeParameter": [
										{
											"id": 710,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 713,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"children": [
										{
											"id": 715,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 787,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 716,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 788,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 714,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 786,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												715,
												716,
												714
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 780,
											"character": 45
										}
									],
									"typeParameter": [
										{
											"id": 717,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 744,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"children": [
										{
											"id": 745,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 895,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 747,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 900,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 746,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 896,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 128,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ArrayTypeStatic"
													},
													{
														"type": "reference",
														"id": 130,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ArrayTypeDynamic"
													},
													{
														"type": "reference",
														"id": 139,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "MappingType"
													},
													{
														"type": "reference",
														"id": 180,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "StructTypeLocal"
													},
													{
														"type": "reference",
														"id": 190,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "StructTypeGlobal"
													},
													{
														"type": "reference",
														"id": 109,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "StringType"
													},
													{
														"type": "reference",
														"id": 91,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "BytesTypeDynamic"
													},
													{
														"type": "reference",
														"id": 202,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "TupleType"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												745,
												747,
												746
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 892,
											"character": 42
										}
									],
									"typeParameter": [
										{
											"id": 748,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 528,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"children": [
										{
											"id": 531,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 155,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 533,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IntError"
													}
												]
											}
										},
										{
											"id": 530,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 154,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 529,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 153,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 74,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												531,
												530,
												529
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 150,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 532,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 535,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 537,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 177,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 538,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 178,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 536,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 176,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												537,
												538,
												536
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 172,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 539,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									]
								},
								{
									"id": 784,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"children": [
										{
											"id": 785,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1073,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												785
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1070,
											"character": 43
										}
									],
									"typeParameter": [
										{
											"id": 786,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 675,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"children": [
										{
											"id": 678,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 647,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 736,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "GenericError"
											}
										},
										{
											"id": 677,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 646,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 676,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 645,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 243,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												678,
												677,
												676
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 642,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 679,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 730,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"children": [
										{
											"id": 734,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 834,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 732,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 832,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 733,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 833,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 731,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 831,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												734,
												732,
												733,
												731
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 828,
											"character": 47
										}
									],
									"typeParameter": [
										{
											"id": 735,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 654,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"children": [
										{
											"id": 657,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 581,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 736,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "GenericError"
											}
										},
										{
											"id": 656,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 580,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 655,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 579,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 139,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												657,
												656,
												655
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 576,
											"character": 35
										}
									],
									"typeParameter": [
										{
											"id": 658,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 718,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"children": [
										{
											"id": 722,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 804,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 720,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 802,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 721,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 803,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 719,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 801,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												722,
												720,
												721,
												719
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 798,
											"character": 44
										}
									],
									"typeParameter": [
										{
											"id": 723,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 763,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"children": [
										{
											"id": 764,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 958,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 767,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 961,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 765,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 959,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "BytesLocation"
											}
										},
										{
											"id": 766,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 960,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												764,
												767,
												765,
												766
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 955,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 768,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 757,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"children": [
										{
											"id": 759,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 936,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 758,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 935,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 760,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 937,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												759,
												758,
												760
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 932,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 761,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 769,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in storage"
									},
									"children": [
										{
											"id": 770,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 972,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 771,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 973,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 1418,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Range"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												770,
												771
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 969,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 772,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 587,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a string"
									},
									"children": [
										{
											"id": 590,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 345,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 776,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 778,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 589,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 344,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 588,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 343,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 109,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												590,
												589,
												588
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 340,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 591,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 661,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"children": [
										{
											"id": 664,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 603,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 776,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 778,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 663,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 602,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 662,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 601,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 174,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												664,
												663,
												662
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 598,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 665,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 668,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"children": [
										{
											"id": 671,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 625,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 776,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 778,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 670,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 624,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 669,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 623,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 202,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												671,
												670,
												669
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 620,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 672,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 682,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a type"
									},
									"children": [
										{
											"id": 685,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 669,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 736,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "GenericError"
											}
										},
										{
											"id": 684,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 668,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 683,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 667,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 251,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												685,
												684,
												683
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 664,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 686,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 599,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 602,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 379,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 611,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UfixedError"
													}
												]
											}
										},
										{
											"id": 601,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 378,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 600,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 377,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 120,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												602,
												601,
												600
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 374,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 603,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 613,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 615,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 428,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 616,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 429,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 614,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 427,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												615,
												616,
												614
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 421,
											"character": 35
										}
									],
									"typeParameter": [
										{
											"id": 617,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 516,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"children": [
										{
											"id": 519,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 117,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 749,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 744,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 753,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 757,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 763,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 769,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 773,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 521,
														"typeArguments": [
															{
																"type": "reference",
																"name": "C"
															}
														],
														"name": "UintError"
													}
												]
											}
										},
										{
											"id": 518,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 116,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 517,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 115,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 69,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												519,
												518,
												517
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 112,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 520,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 523,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 525,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 141,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 526,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 142,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "PaddingType"
											}
										},
										{
											"id": 524,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 140,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												525,
												526,
												524
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 134,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 527,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 753,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"children": [
										{
											"id": 755,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 924,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										},
										{
											"id": 754,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 923,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												755,
												754
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 920,
											"character": 41
										}
									],
									"typeParameter": [
										{
											"id": 756,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 773,
									"name": "UnusedImmutableError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Attempting to read an immutable that is never stored anywhere"
									},
									"children": [
										{
											"id": 774,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 984,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UnusedImmutableError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												774
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 981,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 775,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 749,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"children": [
										{
											"id": 750,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 911,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 751,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 912,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 172,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UserDefinedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												750,
												751
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 908,
											"character": 45
										}
									],
									"typeParameter": [
										{
											"id": 752,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 580,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A address-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 315,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 581,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 582,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "AddressPaddingError"
									}
								},
								{
									"id": 652,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 567,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 653,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 740,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 545,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 199,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 546,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 547,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 551,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolPaddingError"
											}
										]
									}
								},
								{
									"id": 547,
									"name": "BoolOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 208,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 548,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"id": 549,
												"name": "BoolOutOfRangeErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "RawIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 573,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 293,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 574,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 740,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 514,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 103,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 515,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 556,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesStaticErrorResult"
											},
											{
												"type": "reference",
												"id": 568,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 762,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 943,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "memory"
											},
											{
												"type": "literal",
												"value": "calldata"
											},
											{
												"type": "literal",
												"value": "eventdata"
											},
											{
												"type": "literal",
												"value": "returndata"
											},
											{
												"type": "literal",
												"value": "code"
											}
										]
									}
								},
								{
									"id": 561,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 259,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 562,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"id": 563,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "BytesPaddingError"
									}
								},
								{
									"id": 640,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 525,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 641,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 642,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "ContractPaddingError"
									}
								},
								{
									"id": 510,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 50,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 511,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 736,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "GenericError"
											},
											{
												"type": "reference",
												"id": 521,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintError"
											},
											{
												"type": "reference",
												"id": 533,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntError"
											},
											{
												"type": "reference",
												"id": 545,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolError"
											},
											{
												"type": "reference",
												"id": 561,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesStaticError"
											},
											{
												"type": "reference",
												"id": 573,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesDynamicError"
											},
											{
												"type": "reference",
												"id": 580,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressError"
											},
											{
												"type": "reference",
												"id": 592,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringError"
											},
											{
												"type": "reference",
												"id": 604,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedError"
											},
											{
												"type": "reference",
												"id": 611,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedError"
											},
											{
												"type": "reference",
												"id": 652,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayError"
											},
											{
												"type": "reference",
												"id": 659,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingError"
											},
											{
												"type": "reference",
												"id": 666,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructError"
											},
											{
												"type": "reference",
												"id": 680,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicError"
											},
											{
												"type": "reference",
												"id": 687,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeErrorUnion"
											},
											{
												"type": "reference",
												"id": 673,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleError"
											},
											{
												"type": "reference",
												"id": 623,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumError"
											},
											{
												"type": "reference",
												"id": 640,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractError"
											},
											{
												"type": "reference",
												"id": 694,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalError"
											},
											{
												"type": "reference",
												"id": 711,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalError"
											},
											{
												"type": "reference",
												"id": 780,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "InternalUseError"
											}
										]
									}
								},
								{
									"id": 740,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 870,
											"character": 42
										}
									],
									"typeParameter": [
										{
											"id": 741,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 776,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "OverlongArraysAndStringsNotImplementedError"
											},
											{
												"type": "reference",
												"id": 778,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "OverlargePointersNotImplementedError"
											}
										]
									}
								},
								{
									"id": 512,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 84,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 513,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 516,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintErrorResult"
											},
											{
												"type": "reference",
												"id": 528,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntErrorResult"
											},
											{
												"type": "reference",
												"id": 540,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolErrorResult"
											},
											{
												"type": "reference",
												"id": 514,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesErrorResult"
											},
											{
												"type": "reference",
												"id": 575,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressErrorResult"
											},
											{
												"type": "reference",
												"id": 587,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringErrorResult"
											},
											{
												"type": "reference",
												"id": 594,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedErrorResult"
											},
											{
												"type": "reference",
												"id": 599,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedErrorResult"
											},
											{
												"type": "reference",
												"id": 618,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumErrorResult"
											},
											{
												"type": "reference",
												"id": 635,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 623,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 454,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 624,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 625,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 627,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumPaddingError"
											},
											{
												"type": "reference",
												"id": 633,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumNotFoundDecodingError"
											}
										]
									}
								},
								{
									"id": 633,
									"name": "EnumNotFoundDecodingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 496,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 634,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumNotFoundDecodingErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "RawIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 625,
									"name": "EnumOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 463,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 626,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumOutOfRangeErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "RawIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 742,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 882,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 743,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 749,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 738,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 508,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 32,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 509,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 512,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ElementaryErrorResult"
											},
											{
												"type": "reference",
												"id": 647,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayErrorResult"
											},
											{
												"type": "reference",
												"id": 654,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingErrorResult"
											},
											{
												"type": "reference",
												"id": 661,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructErrorResult"
											},
											{
												"type": "reference",
												"id": 675,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicErrorResult"
											},
											{
												"type": "reference",
												"id": 682,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeErrorResult"
											},
											{
												"type": "reference",
												"id": 668,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleErrorResult"
											},
											{
												"type": "reference",
												"id": 689,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalErrorResult"
											},
											{
												"type": "reference",
												"id": 706,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalErrorResult"
											}
										]
									}
								},
								{
									"id": 604,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 387,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 605,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 606,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "FixedPaddingError"
									}
								},
								{
									"id": 694,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 704,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 695,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 696,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalNonStackPaddingError"
											},
											{
												"type": "reference",
												"id": 701,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalStackPaddingError"
											}
										]
									}
								},
								{
									"id": 711,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 767,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 712,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 713,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalPaddingError"
											},
											{
												"type": "reference",
												"id": 718,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "NoSuchInternalFunctionError"
											},
											{
												"type": "reference",
												"id": 724,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "DeployedFunctionInConstructorError"
											},
											{
												"type": "reference",
												"id": 730,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MalformedInternalFunctionError"
											}
										]
									}
								},
								{
									"id": 736,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 846,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 737,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 749,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 744,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IndexedReferenceTypeError"
											},
											{
												"type": "reference",
												"id": 738,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 533,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An int-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 163,
											"character": 20
										}
									],
									"typeParameter": [
										{
											"id": 534,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 535,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "IntPaddingError"
									}
								},
								{
									"id": 780,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal-use error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1044,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 781,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 782,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "OverlongArrayOrStringStrictModeError"
											},
											{
												"type": "reference",
												"id": 784,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "InternalFunctionInABIError"
											}
										]
									}
								},
								{
									"id": 680,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 655,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 681,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 659,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 589,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 660,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 778,
									"name": "OverlargePointersNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1016,
											"character": 48
										}
									],
									"typeParameter": [
										{
											"id": 779,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "PointerIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 782,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1053,
											"character": 48
										}
									],
									"typeParameter": [
										{
											"id": 783,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "LengthIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 776,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 992,
											"character": 55
										}
									],
									"typeParameter": [
										{
											"id": 777,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedErrorBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "LengthIntegerFields"
												}
											}
										]
									}
								},
								{
									"id": 738,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A read error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 857,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 739,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 753,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UnsupportedConstantError"
											},
											{
												"type": "reference",
												"id": 757,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ReadErrorStack"
											},
											{
												"type": "reference",
												"id": 763,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ReadErrorBytes"
											},
											{
												"type": "reference",
												"id": 769,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ReadErrorStorage"
											},
											{
												"type": "reference",
												"id": 773,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UnusedImmutableError"
											}
										]
									}
								},
								{
									"id": 592,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 353,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 593,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 740,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 666,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 611,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 667,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 740,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 673,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 633,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 674,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 740,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 687,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 678,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 688,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 611,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 412,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 612,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 613,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "UfixedPaddingError"
									}
								},
								{
									"id": 521,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 125,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 522,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 523,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "UintPaddingError"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										575,
										582,
										647,
										540,
										549,
										551,
										568,
										563,
										556,
										635,
										642,
										724,
										618,
										627,
										594,
										606,
										689,
										696,
										701,
										706,
										713,
										744,
										528,
										535,
										784,
										675,
										730,
										654,
										718,
										763,
										757,
										769,
										587,
										661,
										668,
										682,
										599,
										613,
										516,
										523,
										753,
										773,
										749
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												575,
												582,
												540,
												551,
												568,
												563,
												556,
												627,
												594,
												606,
												528,
												535,
												587,
												599,
												613,
												516,
												523
											]
										},
										{
											"title": "Container types",
											"children": [
												647,
												654,
												661,
												668
											]
										},
										{
											"title": "Function types",
											"children": [
												724,
												689,
												696,
												701,
												706,
												713,
												730,
												718
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												675,
												682
											]
										},
										{
											"title": "Generic errors",
											"children": [
												744,
												763,
												757,
												769,
												753,
												773,
												749
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												784
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												635,
												642,
												618
											]
										},
										{
											"title": "Other",
											"children": [
												549
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										580,
										652,
										545,
										547,
										573,
										514,
										762,
										561,
										640,
										510,
										740,
										512,
										623,
										633,
										625,
										742,
										508,
										604,
										694,
										711,
										736,
										533,
										780,
										680,
										659,
										778,
										782,
										776,
										738,
										592,
										666,
										673,
										687,
										611,
										521
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												510,
												508
											]
										},
										{
											"title": "Elementary types",
											"children": [
												580,
												545,
												547,
												573,
												514,
												561,
												512,
												604,
												533,
												592,
												611,
												521
											]
										},
										{
											"title": "Container types",
											"children": [
												652,
												659,
												666,
												673
											]
										},
										{
											"title": "Function types",
											"children": [
												694,
												711
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												680,
												687
											]
										},
										{
											"title": "Generic errors",
											"children": [
												740,
												742,
												736,
												778,
												776,
												738
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												780,
												782
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												640,
												623,
												633,
												625
											]
										},
										{
											"title": "Other",
											"children": [
												762
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/errors.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 46,
							"name": "Types",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 104,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"children": [
										{
											"id": 106,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 161,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 105,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 160,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										},
										{
											"id": 107,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 162,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												106,
												105,
												107
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 157,
											"character": 35
										}
									],
									"typeParameter": [
										{
											"id": 108,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 99,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"children": [
										{
											"id": 101,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 148,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 102,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 149,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 100,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 147,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												101,
												102,
												100
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 144,
											"character": 36
										}
									],
									"typeParameter": [
										{
											"id": 103,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 130,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"children": [
										{
											"id": 133,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 253,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Type"
											}
										},
										{
											"id": 132,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 252,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 134,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 254,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Location"
											}
										},
										{
											"id": 131,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 251,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "array"
											}
										},
										{
											"id": 135,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 255,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												133,
												132,
												134,
												131,
												135
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 248,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 136,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 79,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"children": [
										{
											"id": 80,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 89,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bool"
											}
										},
										{
											"id": 81,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 90,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												80,
												81
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 86,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 82,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 91,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 93,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 125,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 94,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 126,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Location"
											}
										},
										{
											"id": 92,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 124,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 95,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 127,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												93,
												94,
												92,
												95
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 121,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 96,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 85,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"children": [
										{
											"id": 87,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 111,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "static"
											}
										},
										{
											"id": 88,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 112,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 86,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 110,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 89,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 113,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												87,
												88,
												86,
												89
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 107,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 90,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 235,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"children": [
										{
											"id": 239,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 565,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1942,
												"name": "ContractKind"
											}
										},
										{
											"id": 237,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 563,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "foreign"
											}
										},
										{
											"id": 240,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 569,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 236,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 562,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 238,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 564,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												239,
												237,
												240,
												236,
												238
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 559,
											"character": 36
										}
									],
									"typeParameter": [
										{
											"id": 241,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 227,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"children": [
										{
											"id": 232,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 545,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1942,
												"name": "ContractKind"
											}
										},
										{
											"id": 230,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 543,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 229,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 539,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "native"
											}
										},
										{
											"id": 233,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 549,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 228,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 538,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 231,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 544,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												232,
												230,
												229,
												233,
												228,
												231
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 535,
											"character": 35
										}
									],
									"typeParameter": [
										{
											"id": 234,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 218,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global enum"
									},
									"children": [
										{
											"id": 221,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 510,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 220,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 506,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 223,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 515,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 219,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 505,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 222,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 511,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												221,
												220,
												223,
												219,
												222
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 502,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 224,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 209,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"children": [
										{
											"id": 215,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 490,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"id": 227,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 214,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 489,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 212,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 487,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 211,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 483,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 216,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 494,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 210,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 482,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 213,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 488,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												215,
												214,
												212,
												211,
												216,
												210,
												213
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 479,
											"character": 30
										}
									],
									"typeParameter": [
										{
											"id": 217,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 114,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"children": [
										{
											"id": 116,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 187,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 117,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 188,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 115,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 186,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "fixed"
											}
										},
										{
											"id": 118,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 189,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												116,
												117,
												115,
												118
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 183,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 119,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 164,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"children": [
										{
											"id": 167,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 352,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 165,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 350,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 168,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 354,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 166,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 351,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												167,
												165,
												168,
												166
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 347,
											"character": 44
										}
									],
									"typeParameter": [
										{
											"id": 169,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 156,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"children": [
										{
											"id": 161,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 337,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 67,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "Type"
												}
											}
										},
										{
											"id": 159,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 335,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 160,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 336,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1941,
												"name": "Mutability"
											}
										},
										{
											"id": 162,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 338,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 67,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "Type"
												}
											}
										},
										{
											"id": 157,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 333,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 158,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 334,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												161,
												159,
												160,
												162,
												157,
												158
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 330,
											"character": 45
										}
									],
									"typeParameter": [
										{
											"id": 163,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 147,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"children": [
										{
											"id": 151,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 311,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 67,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "Type"
												}
											}
										},
										{
											"id": 150,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 310,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1941,
												"name": "Mutability"
											}
										},
										{
											"id": 152,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 312,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 67,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "Type"
												}
											}
										},
										{
											"id": 148,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 308,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 149,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 309,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												151,
												150,
												152,
												148,
												149
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 305,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 153,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 74,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"children": [
										{
											"id": 76,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 77,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 75,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 76,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "int"
											}
										},
										{
											"id": 77,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 78,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												76,
												75,
												77
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 73,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 78,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 243,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"children": [
										{
											"id": 246,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 589,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 247,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 248,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 249,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 67,
															"typeArguments": [
																{
																	"type": "reference",
																	"name": "C"
																}
															],
															"name": "Type"
														}
													}
												}
											}
										},
										{
											"id": 244,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 584,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "magic"
											}
										},
										{
											"id": 245,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 585,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 242,
												"name": "MagicVariableName"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												246,
												244,
												245
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 581,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 250,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 139,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"children": [
										{
											"id": 141,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 286,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 137,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ElementaryType"
											}
										},
										{
											"id": 143,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 288,
													"character": 10
												}
											],
											"type": {
												"type": "literal",
												"value": "storage"
											}
										},
										{
											"id": 140,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 285,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "mapping"
											}
										},
										{
											"id": 142,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 287,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												141,
												143,
												140,
												142
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 282,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 144,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 176,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 177,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 393,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 178,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 394,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												177,
												178
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 390,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 179,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 198,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 199,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 446,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 200,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 447,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												199,
												200
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 443,
											"character": 36
										}
									],
									"typeParameter": [
										{
											"id": 201,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 109,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a string"
									},
									"children": [
										{
											"id": 111,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 174,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Location"
											}
										},
										{
											"id": 110,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 173,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "string"
											}
										},
										{
											"id": 112,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 175,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												111,
												110,
												112
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 170,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 113,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 190,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global structs"
									},
									"children": [
										{
											"id": 193,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 434,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 192,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 430,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 196,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 440,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Location"
											}
										},
										{
											"id": 195,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 439,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 176,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 191,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 429,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 194,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 435,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												193,
												192,
												196,
												195,
												191,
												194
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 426,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 197,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 180,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"children": [
										{
											"id": 186,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 413,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"id": 227,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 185,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 412,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 183,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 410,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 182,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 406,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 188,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 418,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1939,
												"name": "Location"
											}
										},
										{
											"id": 187,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 417,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 176,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 181,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 405,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 184,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 411,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												186,
												185,
												183,
												182,
												188,
												187,
												181,
												184
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 402,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 189,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 202,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"children": [
										{
											"id": 204,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 459,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 198,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "OptionallyNamedType"
												}
											}
										},
										{
											"id": 203,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 458,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "tuple"
											}
										},
										{
											"id": 205,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 460,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												204,
												203,
												205
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 455,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 206,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 253,
									"name": "TypeTypeContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract type"
									},
									"children": [
										{
											"id": 256,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 617,
													"character": 20
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 176,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 255,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 612,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 227,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 254,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 611,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												256,
												255,
												254
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 608,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 257,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 258,
									"name": "TypeTypeEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum type"
									},
									"children": [
										{
											"id": 260,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 628,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "EnumType"
											}
										},
										{
											"id": 259,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 627,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												260,
												259
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 624,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 261,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 264,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 648,
											"character": 26
										}
									],
									"indexSignature": {
										"id": 265,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 266,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 172,
											"name": "UserDefinedType"
										}
									}
								},
								{
									"id": 120,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 122,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 201,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 123,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 202,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 121,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 200,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "ufixed"
											}
										},
										{
											"id": 124,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 203,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												122,
												123,
												121,
												124
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 197,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 125,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 69,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"children": [
										{
											"id": 71,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 64,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 70,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 63,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "uint"
											}
										},
										{
											"id": 72,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 65,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												71,
												70,
												72
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 60,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 73,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 97,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an address"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 135,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 98,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 99,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressTypeSpecific"
											},
											{
												"type": "reference",
												"id": 104,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressTypeGeneral"
											}
										]
									}
								},
								{
									"id": 126,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an array"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 211,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 127,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 128,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayTypeStatic"
											},
											{
												"type": "reference",
												"id": 130,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayTypeDynamic"
											}
										]
									}
								},
								{
									"id": 128,
									"name": "ArrayTypeStatic",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 220,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 129,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayTypeStaticBaseFields"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "ArrayTypeStaticLengthField"
												}
											}
										]
									}
								},
								{
									"id": 83,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 98,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 84,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 85,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeStatic"
											},
											{
												"type": "reference",
												"id": 91,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 170,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 362,
											"character": 31
										}
									],
									"typeParameter": [
										{
											"id": 171,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 180,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 209,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumTypeLocal"
											}
										]
									}
								},
								{
									"id": 225,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 526,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 226,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 227,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 235,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeForeign"
											}
										]
									}
								},
								{
									"id": 137,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 263,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 138,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 69,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 74,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 79,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 83,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 114,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 120,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 97,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 109,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										]
									}
								},
								{
									"id": 207,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 470,
											"character": 20
										}
									],
									"typeParameter": [
										{
											"id": 208,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 209,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumTypeLocal"
											},
											{
												"type": "reference",
												"id": 218,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumTypeGlobal"
											}
										]
									}
								},
								{
									"id": 154,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 321,
											"character": 32
										}
									],
									"typeParameter": [
										{
											"id": 155,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 156,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalTypeSpecific"
											},
											{
												"type": "reference",
												"id": 164,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalTypeGeneral"
											}
										]
									}
								},
								{
									"id": 145,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 296,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 146,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 147,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalType"
											},
											{
												"type": "reference",
												"id": 154,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalType"
											}
										]
									}
								},
								{
									"id": 242,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 574,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "message"
											},
											{
												"type": "literal",
												"value": "block"
											},
											{
												"type": "literal",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 262,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Reference types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 636,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 263,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 126,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 139,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 174,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 109,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 91,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 174,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 386,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 175,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 180,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 190,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructTypeGlobal"
											}
										]
									}
								},
								{
									"id": 67,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Object representing a type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 36,
											"character": 16
										}
									],
									"typeParameter": [
										{
											"id": 68,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 69,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 74,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 79,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 83,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 97,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 114,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 120,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 109,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 126,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 139,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 145,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionType"
											},
											{
												"type": "reference",
												"id": 174,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											},
											{
												"type": "reference",
												"id": 243,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicType"
											},
											{
												"type": "reference",
												"id": 251,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeType"
											},
											{
												"type": "reference",
												"id": 202,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleType"
											}
										]
									}
								},
								{
									"id": 251,
									"name": "TypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types and enum\ntypes, but may expand in the future."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 600,
											"character": 20
										}
									],
									"typeParameter": [
										{
											"id": 252,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 253,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeTypeContract"
											},
											{
												"type": "reference",
												"id": 258,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeTypeEnum"
											}
										]
									}
								},
								{
									"id": 172,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "User-defined types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 371,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 173,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 170,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractDefinedType"
											},
											{
												"type": "reference",
												"id": 227,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 190,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructTypeGlobal"
											},
											{
												"type": "reference",
												"id": 218,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumTypeGlobal"
											}
										]
									}
								},
								{
									"id": 50,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 670,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 51,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 52,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												},
												{
													"id": 53,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 64,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 845,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 65,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 66,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 170,
													"typeArguments": [
														{
															"type": "reference",
															"id": 793,
															"name": "DefaultConfig"
														}
													],
													"name": "ContractDefinedType"
												}
											}
										}
									]
								},
								{
									"id": 47,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 657,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 48,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 49,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 262,
													"typeArguments": [
														{
															"type": "reference",
															"id": 793,
															"name": "DefaultConfig"
														}
													],
													"name": "ReferenceType"
												}
											}
										}
									]
								},
								{
									"id": 54,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 687,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 55,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 56,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												},
												{
													"id": 57,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1939,
																"name": "Location"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 58,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 732,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 59,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 60,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 61,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 741,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 62,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 63,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										104,
										99,
										130,
										79,
										91,
										85,
										235,
										227,
										218,
										209,
										114,
										164,
										156,
										147,
										74,
										243,
										139,
										176,
										198,
										109,
										190,
										180,
										202,
										253,
										258,
										264,
										120,
										69
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												104,
												99,
												79,
												91,
												85,
												114,
												74,
												109,
												120,
												69
											]
										},
										{
											"title": "Container types",
											"children": [
												130,
												139,
												190,
												180,
												202
											]
										},
										{
											"title": "Function types",
											"children": [
												164,
												156,
												147
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												243,
												253,
												258
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												235,
												218,
												209
											]
										},
										{
											"title": "User-defined elemntary types",
											"children": [
												227
											]
										},
										{
											"title": "Other",
											"children": [
												176,
												198,
												264
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										97,
										126,
										128,
										83,
										170,
										225,
										137,
										207,
										154,
										145,
										242,
										262,
										174,
										67,
										251,
										172
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												170,
												137,
												262,
												67,
												172
											]
										},
										{
											"title": "Elementary types",
											"children": [
												97,
												83
											]
										},
										{
											"title": "Container types",
											"children": [
												126,
												128,
												174
											]
										},
										{
											"title": "Function types",
											"children": [
												154,
												145
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												251
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												225,
												207
											]
										},
										{
											"title": "Other",
											"children": [
												242
											]
										}
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										50,
										64,
										47,
										54,
										58,
										61
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/types.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 796,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 823,
									"name": "Circularity",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 827,
											"name": "sever",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 85,
													"character": 21
												}
											],
											"signatures": [
												{
													"id": 828,
													"name": "sever",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 829,
															"name": "tied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											]
										},
										{
											"id": 824,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 19
												}
											],
											"signatures": [
												{
													"id": 825,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 826,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												827,
												824
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/circularity.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 797,
									"name": "Exception",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"children": [
										{
											"id": 798,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 16,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 799,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 800,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 742,
																"name": "Format.Errors.ErrorForThrowing"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												798
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/exception.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 801,
									"name": "Inspect",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 814,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 815,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"signatures": [
														{
															"id": 816,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 817,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 268,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 793,
																				"name": "DefaultConfig"
																			}
																		],
																		"name": "Result"
																	}
																}
															],
															"type": {
																"type": "reference",
																"id": 814,
																"name": "ResultInspector"
															}
														}
													]
												},
												{
													"id": 818,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"typeArguments": [
															{
																"type": "reference",
																"id": 793,
																"name": "DefaultConfig"
															}
														],
														"name": "Result"
													}
												},
												{
													"id": 819,
													"name": "__@custom@21691",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 60,
															"character": 23
														}
													],
													"signatures": [
														{
															"id": 820,
															"name": "__@custom@21691",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 821,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 822,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														815
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														818
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														819
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 55,
													"character": 28
												},
												{
													"fileName": "codec/lib/export.ts",
													"line": 12,
													"character": 24
												}
											]
										},
										{
											"id": 811,
											"name": "unsafeNativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 455,
													"character": 30
												},
												{
													"fileName": "codec/lib/export.ts",
													"line": 12,
													"character": 40
												}
											],
											"signatures": [
												{
													"id": 812,
													"name": "unsafeNativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 813,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										},
										{
											"id": 802,
											"name": "unsafeNativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 414,
													"character": 39
												}
											],
											"signatures": [
												{
													"id": 803,
													"name": "unsafeNativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[unsafeNativize]] for why!"
													},
													"parameters": [
														{
															"id": 804,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 805,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/inspect.ts",
																			"line": 414,
																			"character": 50
																		}
																	],
																	"indexSignature": {
																		"id": 806,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 807,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 268,
																			"name": "Format.Values.Result"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 808,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 416,
																	"character": 3
																}
															],
															"indexSignature": {
																"id": 809,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 810,
																		"name": "name",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												814
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												811,
												802
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 830,
									"name": "Serial",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 837,
											"name": "deserializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 509,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 838,
													"name": "deserializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 839,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 790,
																		"name": "SerialConfig"
																	}
																],
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											]
										},
										{
											"id": 840,
											"name": "deserializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 515,
													"character": 31
												}
											],
											"signatures": [
												{
													"id": 841,
													"name": "deserializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 842,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 67,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 790,
																		"name": "SerialConfig"
																	}
																],
																"name": "Format.Types.Type"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												}
											]
										},
										{
											"id": 831,
											"name": "serializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 14,
													"character": 31
												}
											],
											"signatures": [
												{
													"id": 832,
													"name": "serializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 833,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"typeArguments": [
															{
																"type": "reference",
																"id": 790,
																"name": "SerialConfig"
															}
														],
														"name": "Format.Values.Result"
													}
												}
											]
										},
										{
											"id": 834,
											"name": "serializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 20,
													"character": 29
												}
											],
											"signatures": [
												{
													"id": 835,
													"name": "serializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 836,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 67,
																"name": "Format.Types.Type"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 67,
														"typeArguments": [
															{
																"type": "reference",
																"id": 790,
																"name": "SerialConfig"
															}
														],
														"name": "Format.Types.Type"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												837,
												840,
												831,
												834
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/serial.ts",
											"line": 1,
											"character": 0
										}
									]
								}
							],
							"groups": [
								{
									"title": "Namespaces",
									"kind": 2,
									"children": [
										823,
										797,
										801,
										830
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/utils/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 267,
							"name": "Values",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 455,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An address value"
									},
									"children": [
										{
											"id": 457,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 134,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 456,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 133,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 97,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressType"
											}
										},
										{
											"id": 458,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 135,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 459,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 460,
															"name": "asAddress",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 139,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 461,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 143,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																460,
																461
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												457,
												456,
												458
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 130,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 462,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 300,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"children": [
										{
											"id": 302,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 242,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 303,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 246,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 301,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 241,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 126,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayType"
											}
										},
										{
											"id": 304,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 247,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 268,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "Result"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												302,
												303,
												301,
												304
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 238,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 305,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 433,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A boolean value"
									},
									"children": [
										{
											"id": 435,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 82,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 434,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 81,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 79,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolType"
											}
										},
										{
											"id": 436,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 83,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 437,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 438,
															"name": "asBoolean",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 84,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																438
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												435,
												434,
												436
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 78,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 439,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 448,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"children": [
										{
											"id": 450,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 116,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 449,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 115,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 91,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeDynamic"
											}
										},
										{
											"id": 451,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 117,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 452,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 453,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 121,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																453
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												450,
												449,
												451
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 112,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 454,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 440,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"children": [
										{
											"id": 442,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 97,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 441,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 96,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 85,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesTypeStatic"
											}
										},
										{
											"id": 443,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 98,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 444,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 445,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 102,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 446,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 103,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																445,
																446
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												442,
												441,
												443
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 93,
											"character": 33
										}
									],
									"typeParameter": [
										{
											"id": 447,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 490,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 492,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 268,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 491,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 267,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 493,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 269,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 495,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												492,
												491,
												493
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 264,
											"character": 30
										}
									],
									"typeParameter": [
										{
											"id": 494,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 497,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"children": [
										{
											"id": 499,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 295,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 501,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 300,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 498,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 290,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 500,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 299,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												499,
												501,
												498,
												500
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 287,
											"character": 39
										}
									],
									"typeParameter": [
										{
											"id": 502,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 503,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 505,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 315,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 504,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 310,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 506,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 319,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												505,
												504,
												506
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 309,
											"character": 41
										}
									]
								},
								{
									"id": 485,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum value"
									},
									"children": [
										{
											"id": 487,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 236,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 486,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 235,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 207,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumType"
											}
										},
										{
											"id": 488,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 237,
													"character": 7
												}
											],
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"name": "EnumValueBaseFields"
													},
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "indexedAccess",
															"indexType": {
																"type": "literal",
																"value": "integerType"
															},
															"objectType": {
																"type": "reference",
																"name": "C"
															}
														},
														"objectType": {
															"type": "reference",
															"name": "EnumValueNumericFields"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												487,
												486,
												488
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 232,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 489,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 475,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"children": [
										{
											"id": 477,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 199,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 476,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 198,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 114,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedType"
											}
										},
										{
											"id": 478,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 200,
													"character": 7
												}
											],
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "decimalType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "DecimalValueInfo"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												476,
												478
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 195,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 479,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 366,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 368,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 452,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 367,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 451,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 154,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalType"
											}
										},
										{
											"id": 369,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 453,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 371,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												368,
												367,
												369
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 448,
											"character": 38
										}
									],
									"typeParameter": [
										{
											"id": 370,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 379,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"children": [
										{
											"id": 381,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 498,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 497,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 380,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 497,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "invalid"
											}
										},
										{
											"id": 382,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 502,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												381,
												380,
												382
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 494,
											"character": 49
										}
									],
									"typeParameter": [
										{
											"id": 383,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 373,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"children": [
										{
											"id": 377,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 485,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 375,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 480,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 497,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 374,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 479,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 376,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 484,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												377,
												375,
												374,
												376
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 476,
											"character": 47
										}
									],
									"typeParameter": [
										{
											"id": 378,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 384,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 386,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 512,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 503,
												"name": "ContractValueInfoUnknown"
											}
										},
										{
											"id": 385,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 511,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 387,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 516,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												386,
												385,
												387
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 510,
											"character": 49
										}
									]
								},
								{
									"id": 390,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 392,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 541,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 391,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 540,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 147,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalType"
											}
										},
										{
											"id": 393,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 542,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 395,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												392,
												391,
												393
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 537,
											"character": 38
										}
									],
									"typeParameter": [
										{
											"id": 394,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 407,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"children": [
										{
											"id": 411,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 599,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 409,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 597,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 410,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 598,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 408,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 596,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												411,
												409,
												410,
												408
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 593,
											"character": 51
										}
									],
									"typeParameter": [
										{
											"id": 412,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 397,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"children": [
										{
											"id": 401,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 571,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 399,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 569,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 403,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Is null for a free function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 576,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 400,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 570,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 404,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "An internal opaque ID"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 580,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 398,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 568,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 405,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 581,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1941,
												"name": "Mutability"
											}
										},
										{
											"id": 402,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 572,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												401,
												399,
												403,
												400,
												404,
												398,
												405,
												402
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 565,
											"character": 47
										}
									],
									"typeParameter": [
										{
											"id": 406,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 413,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type is used when decoding internal functions in contexts that don't\nsupport full decoding of such functions.  The high-level decoding interface\ncan currently only sometimes perform such a full decoding.",
										"text": "In contexts where such full decoding isn't supported, you'll get one of\nthese; so you'll still get the program counter values, but further\ninformation will be absent.  Note you'll get this even if really it should\ndecode to an error, because if there's insufficient information to determine\nadditional function information, there's necessarily insufficient\ninformation to determine if it should be an error.\n"
									},
									"children": [
										{
											"id": 417,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 622,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 415,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 620,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 225,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractType"
											}
										},
										{
											"id": 416,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 621,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 414,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 619,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												417,
												415,
												416,
												414
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 616,
											"character": 49
										}
									],
									"typeParameter": [
										{
											"id": 418,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 428,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value"
									},
									"children": [
										{
											"id": 430,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 69,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 429,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 68,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 74,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntType"
											}
										},
										{
											"id": 431,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 70,
													"character": 7
												}
											],
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "IntegerValueInfo"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												430,
												429,
												431
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 65,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 432,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 313,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 314,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 280,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"id": 419,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ElementaryValue"
											}
										},
										{
											"id": 315,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 281,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												314,
												315
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 277,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 316,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 342,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"children": [
										{
											"id": 344,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 369,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 343,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 368,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 243,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicType"
											}
										},
										{
											"id": 345,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 371,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 346,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 347,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 348,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 268,
															"typeArguments": [
																{
																	"type": "reference",
																	"name": "C"
																}
															],
															"name": "Result"
														}
													}
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												344,
												343,
												345
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 365,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 349,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 308,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"children": [
										{
											"id": 310,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 268,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 309,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 267,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 139,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingType"
											}
										},
										{
											"id": 311,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 274,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 313,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "KeyValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												310,
												309,
												311
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 264,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 312,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 325,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 326,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 318,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 327,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 319,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												326,
												327
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 315,
											"character": 30
										}
									],
									"typeParameter": [
										{
											"id": 328,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 336,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 337,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 347,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 338,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 348,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												337,
												338
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 344,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 339,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 463,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 465,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 156,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 464,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 155,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 109,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringType"
											}
										},
										{
											"id": 466,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 157,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 468,
												"name": "StringValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												465,
												464,
												466
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 152,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 467,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 472,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 474,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 187,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 473,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 183,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												474,
												473
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 182,
											"character": 41
										}
									]
								},
								{
									"id": 469,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 471,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 174,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 470,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 173,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												471,
												470
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 172,
											"character": 37
										}
									]
								},
								{
									"id": 319,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"children": [
										{
											"id": 321,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 302,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 322,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 306,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 320,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 301,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 174,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructType"
											}
										},
										{
											"id": 323,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 312,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 325,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												321,
												322,
												320,
												323
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 298,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 324,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 331,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"children": [
										{
											"id": 333,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 340,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 332,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 339,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 202,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleType"
											}
										},
										{
											"id": 334,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 341,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 336,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "OptionallyNamedValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												333,
												332,
												334
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 336,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 335,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 354,
									"name": "TypeValueContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 356,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 407,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 355,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 406,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 253,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "TypeTypeContract"
											}
										},
										{
											"id": 357,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 411,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 325,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												356,
												355,
												357
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 403,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 358,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 359,
									"name": "TypeValueEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 361,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 423,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 360,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 422,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 258,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "TypeTypeEnum"
											}
										},
										{
											"id": 362,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 427,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 485,
													"typeArguments": [
														{
															"type": "reference",
															"name": "C"
														}
													],
													"name": "EnumValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												361,
												360,
												362
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 419,
											"character": 30
										}
									],
									"typeParameter": [
										{
											"id": 363,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 480,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"children": [
										{
											"id": 482,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 223,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 481,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 222,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 120,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "UfixedType"
											}
										},
										{
											"id": 483,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 224,
													"character": 7
												}
											],
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "decimalType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "DecimalValueInfo"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												482,
												481,
												483
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 219,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 484,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 423,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"children": [
										{
											"id": 425,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 45,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 424,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 44,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 69,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintType"
											}
										},
										{
											"id": 426,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 46,
													"character": 7
												}
											],
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "integerType"
													},
													"objectType": {
														"type": "reference",
														"name": "C"
													}
												},
												"objectType": {
													"type": "reference",
													"name": "IntegerValueInfo"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												425,
												424,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 41,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 427,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									]
								},
								{
									"id": 286,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An address value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 167,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 287,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 455,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 575,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.AddressErrorResult"
											}
										]
									}
								},
								{
									"id": 298,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An array value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 229,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 299,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 300,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 647,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.ArrayErrorResult"
											}
										]
									}
								},
								{
									"id": 280,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 140,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 281,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 433,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 540,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.BoolErrorResult"
											}
										]
									}
								},
								{
									"id": 284,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 158,
											"character": 30
										}
									],
									"typeParameter": [
										{
											"id": 285,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 448,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesDynamicValue"
											},
											{
												"type": "reference",
												"id": 568,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 274,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 113,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 275,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 282,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesStaticResult"
											},
											{
												"type": "reference",
												"id": 284,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesDynamicResult"
											}
										]
									}
								},
								{
									"id": 282,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 149,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 283,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 440,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 556,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.BytesStaticErrorResult"
											}
										]
									}
								},
								{
									"id": 421,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 32,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 422,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 440,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 448,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesDynamicValue"
											}
										]
									}
								},
								{
									"id": 296,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 216,
											"character": 26
										}
									],
									"typeParameter": [
										{
											"id": 297,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 490,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValue"
											},
											{
												"type": "reference",
												"id": 635,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 495,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 278,
											"character": 29
										}
									],
									"typeParameter": [
										{
											"id": 496,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 497,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 503,
												"name": "ContractValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 272,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 94,
											"character": 28
										}
									],
									"typeParameter": [
										{
											"id": 273,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 276,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintResult"
											},
											{
												"type": "reference",
												"id": 278,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntResult"
											},
											{
												"type": "reference",
												"id": 280,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolResult"
											},
											{
												"type": "reference",
												"id": 274,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesResult"
											},
											{
												"type": "reference",
												"id": 286,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressResult"
											},
											{
												"type": "reference",
												"id": 288,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringResult"
											},
											{
												"type": "reference",
												"id": 290,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedResult"
											},
											{
												"type": "reference",
												"id": 292,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedResult"
											},
											{
												"type": "reference",
												"id": 294,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumResult"
											},
											{
												"type": "reference",
												"id": 296,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractResult"
											}
										]
									}
								},
								{
									"id": 419,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 13,
											"character": 27
										}
									],
									"typeParameter": [
										{
											"id": 420,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 423,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 428,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 433,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 421,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "BytesValue"
											},
											{
												"type": "reference",
												"id": 455,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 463,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 475,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 480,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 485,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 490,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ContractValue"
											}
										]
									}
								},
								{
									"id": 294,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 207,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 295,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 485,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 618,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.EnumErrorResult"
											}
										]
									}
								},
								{
									"id": 290,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 185,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 291,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 475,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 594,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.FixedErrorResult"
											}
										]
									}
								},
								{
									"id": 364,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 439,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 365,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 366,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 689,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.FunctionExternalErrorResult"
											}
										]
									}
								},
								{
									"id": 371,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 464,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 372,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 373,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 379,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalValueInfoInvalid"
											},
											{
												"type": "reference",
												"id": 384,
												"name": "FunctionExternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 388,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 528,
											"character": 34
										}
									],
									"typeParameter": [
										{
											"id": 389,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 390,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValue"
											},
											{
												"type": "reference",
												"id": 706,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.FunctionInternalErrorResult"
											}
										]
									}
								},
								{
									"id": 395,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 553,
											"character": 37
										}
									],
									"typeParameter": [
										{
											"id": 396,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 397,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 407,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValueInfoException"
											},
											{
												"type": "reference",
												"id": 413,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 278,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 131,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 279,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 428,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 528,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.IntErrorResult"
											}
										]
									}
								},
								{
									"id": 340,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 356,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 341,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 342,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 675,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.MagicErrorResult"
											}
										]
									}
								},
								{
									"id": 306,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 255,
											"character": 25
										}
									],
									"typeParameter": [
										{
											"id": 307,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 308,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 654,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.MappingErrorResult"
											}
										]
									}
								},
								{
									"id": 268,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 53,
											"character": 18
										}
									],
									"typeParameter": [
										{
											"id": 269,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 272,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ElementaryResult"
											},
											{
												"type": "reference",
												"id": 298,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayResult"
											},
											{
												"type": "reference",
												"id": 306,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingResult"
											},
											{
												"type": "reference",
												"id": 317,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructResult"
											},
											{
												"type": "reference",
												"id": 329,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleResult"
											},
											{
												"type": "reference",
												"id": 340,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicResult"
											},
											{
												"type": "reference",
												"id": 350,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeResult"
											},
											{
												"type": "reference",
												"id": 364,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalResult"
											},
											{
												"type": "reference",
												"id": 388,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalResult"
											}
										]
									}
								},
								{
									"id": 288,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 176,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 289,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 463,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 587,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.StringErrorResult"
											}
										]
									}
								},
								{
									"id": 468,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 165,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 469,
												"name": "StringValueInfoValid"
											},
											{
												"type": "reference",
												"id": 472,
												"name": "StringValueInfoMalformed"
											}
										]
									}
								},
								{
									"id": 317,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 289,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 318,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 319,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 661,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.StructErrorResult"
											}
										]
									}
								},
								{
									"id": 329,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 327,
											"character": 23
										}
									],
									"typeParameter": [
										{
											"id": 330,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 331,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 668,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.TupleErrorResult"
											}
										]
									}
								},
								{
									"id": 350,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value (or error); currently only allows contract types and\nenum types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 382,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 351,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 352,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 682,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.TypeErrorResult"
											}
										]
									}
								},
								{
									"id": 352,
									"name": "TypeValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext, and the value of an enum type to be an array of its possible options\n(as Values).  May contain errors."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 394,
											"character": 21
										}
									],
									"typeParameter": [
										{
											"id": 353,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 354,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeValueContract"
											},
											{
												"type": "reference",
												"id": 359,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeValueEnum"
											}
										]
									}
								},
								{
									"id": 292,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 194,
											"character": 24
										}
									],
									"typeParameter": [
										{
											"id": 293,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 480,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 599,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.UfixedErrorResult"
											}
										]
									}
								},
								{
									"id": 276,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 122,
											"character": 22
										}
									],
									"typeParameter": [
										{
											"id": 277,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 423,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 516,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "Errors.UintErrorResult"
											}
										]
									}
								},
								{
									"id": 270,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 70,
											"character": 17
										}
									],
									"typeParameter": [
										{
											"id": 271,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 787,
												"name": "Config"
											},
											"default": {
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 419,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ElementaryValue"
											},
											{
												"type": "reference",
												"id": 300,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 308,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 319,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 331,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 342,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 352,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 366,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 390,
												"typeArguments": [
													{
														"type": "reference",
														"name": "C"
													}
												],
												"name": "FunctionInternalValue"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										455,
										300,
										433,
										448,
										440,
										490,
										497,
										503,
										485,
										475,
										366,
										379,
										373,
										384,
										390,
										407,
										397,
										413,
										428,
										313,
										342,
										308,
										325,
										336,
										463,
										472,
										469,
										319,
										331,
										354,
										359,
										480,
										423
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												455,
												433,
												448,
												440,
												475,
												428,
												463,
												472,
												469,
												480,
												423
											]
										},
										{
											"title": "Container types",
											"children": [
												300,
												308,
												319,
												331
											]
										},
										{
											"title": "Function types",
											"children": [
												366,
												379,
												373,
												384,
												390,
												407,
												397,
												413
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												342,
												354,
												359
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												490,
												497,
												503,
												485
											]
										},
										{
											"title": "Other",
											"children": [
												313,
												325,
												336
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										286,
										298,
										280,
										284,
										274,
										282,
										421,
										296,
										495,
										272,
										419,
										294,
										290,
										364,
										371,
										388,
										395,
										278,
										340,
										306,
										268,
										288,
										468,
										317,
										329,
										350,
										352,
										292,
										276,
										270
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												272,
												419,
												268,
												270
											]
										},
										{
											"title": "Elementary types",
											"children": [
												286,
												280,
												284,
												274,
												282,
												421,
												290,
												278,
												288,
												468,
												292,
												276
											]
										},
										{
											"title": "Container types",
											"children": [
												298,
												306,
												317,
												329
											]
										},
										{
											"title": "Function types",
											"children": [
												364,
												371,
												388,
												395
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												340,
												350,
												352
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												296,
												495,
												294
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/values.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 787,
							"name": "Config",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 789,
									"name": "decimalType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 3,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "string"
											},
											{
												"type": "literal",
												"value": "Big"
											}
										]
									}
								},
								{
									"id": 788,
									"name": "integerType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 2,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "string"
											},
											{
												"type": "literal",
												"value": "BN"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										789,
										788
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/config.ts",
									"line": 1,
									"character": 23
								}
							],
							"extendedBy": [
								{
									"type": "reference",
									"id": 790,
									"name": "SerialConfig"
								},
								{
									"type": "reference",
									"id": 793,
									"name": "DefaultConfig"
								}
							]
						},
						{
							"id": 793,
							"name": "DefaultConfig",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 795,
									"name": "decimalType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 8,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": "Big"
									},
									"overwrites": {
										"type": "reference",
										"id": 789,
										"name": "Config.decimalType"
									}
								},
								{
									"id": 794,
									"name": "integerType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 7,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": "BN"
									},
									"overwrites": {
										"type": "reference",
										"id": 788,
										"name": "Config.integerType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										795,
										794
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/config.ts",
									"line": 6,
									"character": 30
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"id": 787,
									"name": "Config"
								}
							]
						},
						{
							"id": 790,
							"name": "SerialConfig",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 792,
									"name": "decimalType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 13,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": "string"
									},
									"overwrites": {
										"type": "reference",
										"id": 789,
										"name": "Config.decimalType"
									}
								},
								{
									"id": 791,
									"name": "integerType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 12,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": "string"
									},
									"overwrites": {
										"type": "reference",
										"id": 788,
										"name": "Config.integerType"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										792,
										791
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/config.ts",
									"line": 11,
									"character": 29
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"id": 787,
									"name": "Config"
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								507,
								46,
								796,
								267
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										507,
										46,
										267
									]
								},
								{
									"title": "Other",
									"children": [
										796
									]
								}
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								787,
								793,
								790
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/format/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1248,
					"name": "MappingKey",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1249,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1250,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 16,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1251,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1252,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 419,
														"name": "Format.Values.ElementaryValue"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1253,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 34,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1254,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1255,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 419,
														"name": "Format.Values.ElementaryValue"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1250,
										1253
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1250,
												1253
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1249
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/mapping-key/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1256,
					"name": "Memory",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1257,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1267,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1268,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1269,
													"name": "MemoryMemberAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1268
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 33
										}
									]
								},
								{
									"id": 1264,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 34
										}
									],
									"indexSignature": {
										"id": 1265,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1266,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1267,
											"name": "MemoryAllocation"
										}
									}
								},
								{
									"id": 1269,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1270,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1272,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 1805,
												"name": "MemoryPointer"
											}
										},
										{
											"id": 1271,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1270,
												1272,
												1271
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 39
										}
									]
								},
								{
									"id": 1258,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1259,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1260,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1264,
												"name": "MemoryAllocations"
											}
										}
									]
								},
								{
									"id": 1261,
									"name": "isSkippedInMemoryStructs",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 26,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1262,
											"name": "isSkippedInMemoryStructs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1263,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1267,
										1264,
										1269
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1258,
										1261
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1273,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1274,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 22,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1275,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1276,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1277,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1805,
														"name": "Pointer.MemoryPointer"
													}
												},
												{
													"id": 1278,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1279,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1280,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 65,
											"character": 47
										}
									],
									"signatures": [
										{
											"id": 1281,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1282,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 262,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1283,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1795,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1284,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1285,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1274,
										1280
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1257,
								1273
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/memory/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1794,
					"name": "Pointer",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1809,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1812,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 38,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1810,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "calldata"
									}
								},
								{
									"id": 1811,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1812,
										1810,
										1811
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 1828,
							"name": "CodePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1831,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 67,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1829,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 65,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "code"
									}
								},
								{
									"id": 1830,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 66,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1831,
										1829,
										1830
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 64,
									"character": 28
								}
							]
						},
						{
							"id": 1838,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1840,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 82,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "AstNode"
									}
								},
								{
									"id": 1839,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 81,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1840,
										1839
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 80,
									"character": 42
								}
							]
						},
						{
							"id": 1817,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1820,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 50,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1818,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "eventdata"
									}
								},
								{
									"id": 1819,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 49,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1820,
										1818,
										1819
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 47,
									"character": 33
								}
							]
						},
						{
							"id": 1821,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1822,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 54,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "eventtopic"
									}
								},
								{
									"id": 1823,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 55,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1822,
										1823
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 53,
									"character": 34
								}
							]
						},
						{
							"id": 1824,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1827,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 61,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1825,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "abi"
									}
								},
								{
									"id": 1826,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 60,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1827,
										1825,
										1826
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 58,
									"character": 34
								}
							]
						},
						{
							"id": 1805,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1808,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 32,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1806,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "memory"
									}
								},
								{
									"id": 1807,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 31,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1808,
										1806,
										1807
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 29,
									"character": 30
								}
							]
						},
						{
							"id": 1813,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1816,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 44,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1814,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "returndata"
									}
								},
								{
									"id": 1815,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 43,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1816,
										1814,
										1815
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 41,
									"character": 34
								}
							]
						},
						{
							"id": 1841,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1842,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 86,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "special"
									}
								},
								{
									"id": 1843,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 87,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1842,
										1843
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 85,
									"character": 31
								}
							]
						},
						{
							"id": 1835,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1837,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 77,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1836,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 76,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1837,
										1836
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 75,
									"character": 36
								}
							]
						},
						{
							"id": 1801,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1803,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 25,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1802,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "stack"
									}
								},
								{
									"id": 1804,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 26,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1803,
										1802,
										1804
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 23,
									"character": 29
								}
							]
						},
						{
							"id": 1832,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1833,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 71,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "storage"
									}
								},
								{
									"id": 1834,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 72,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1418,
										"typeArguments": [
											{
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										],
										"name": "Range"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1833,
										1834
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 70,
									"character": 31
								}
							]
						},
						{
							"id": 1844,
							"name": "UnreadablePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1845,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 91,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "nowhere"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1845
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 90,
									"character": 34
								}
							]
						},
						{
							"id": 1798,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 16,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1809,
										"name": "CalldataPointer"
									},
									{
										"type": "reference",
										"id": 1813,
										"name": "ReturndataPointer"
									},
									{
										"type": "reference",
										"id": 1817,
										"name": "EventDataPointer"
									}
								]
							}
						},
						{
							"id": 1797,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1798,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1824,
										"name": "GenericAbiPointer"
									}
								]
							}
						},
						{
							"id": 1799,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 20,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1805,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1798,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1828,
										"name": "CodePointer"
									}
								]
							}
						},
						{
							"id": 1800,
							"name": "CodeFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1828,
										"name": "CodePointer"
									},
									{
										"type": "reference",
										"id": 1844,
										"name": "UnreadablePointer"
									}
								]
							}
						},
						{
							"id": 1795,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1796,
										"name": "StackFormPointer"
									},
									{
										"type": "reference",
										"id": 1805,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1832,
										"name": "StoragePointer"
									},
									{
										"type": "reference",
										"id": 1798,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1800,
										"name": "CodeFormPointer"
									},
									{
										"type": "reference",
										"id": 1838,
										"name": "ConstantDefinitionPointer"
									},
									{
										"type": "reference",
										"id": 1841,
										"name": "SpecialPointer"
									},
									{
										"type": "reference",
										"id": 1821,
										"name": "EventTopicPointer"
									}
								]
							}
						},
						{
							"id": 1796,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1801,
										"name": "StackPointer"
									},
									{
										"type": "reference",
										"id": 1835,
										"name": "StackLiteralPointer"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1809,
								1828,
								1838,
								1817,
								1821,
								1824,
								1805,
								1813,
								1841,
								1835,
								1801,
								1832,
								1844
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1798,
								1797,
								1799,
								1800,
								1795,
								1796
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/pointer/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1286,
					"name": "Special",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1287,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1293,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1294,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1295,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 243,
														"name": "Format.Types.MagicType"
													}
												},
												{
													"id": 1296,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1841,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1297,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 340,
														"name": "Format.Values.MagicResult"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1288,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1289,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1290,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1291,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1841,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1292,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1293,
										1288
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1298,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1299,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1300,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1301,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1841,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1302,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1299
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1287,
								1298
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/special/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1303,
					"name": "Stack",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1304,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1310,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 40,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1311,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1312,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1313,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Pointer.StackLiteralPointer"
													}
												},
												{
													"id": 1314,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1305,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 22,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1306,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1307,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1308,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1801,
														"name": "Pointer.StackPointer"
													}
												},
												{
													"id": 1309,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1310,
										1305
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1315,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1316,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1317,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1318,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1801,
														"name": "Pointer.StackPointer"
													}
												},
												{
													"id": 1319,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1320,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1321,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1322,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Pointer.StackLiteralPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1316,
										1320
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1304,
								1315
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/stack/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1323,
					"name": "Storage",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1340,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1382,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {},
									"children": [
										{
											"id": 1383,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {},
											"signatures": [
												{
													"id": 1384,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1385,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1386,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1387,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1388,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1382,
														"name": "UnknownBaseContractIdError"
													}
												}
											]
										},
										{
											"id": 1392,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1389,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 36,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1391,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 38,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1390,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1383
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1392,
												1389,
												1391,
												1390
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 35,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "Error"
										}
									]
								},
								{
									"id": 1369,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1370,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1377,
													"name": "StateVariableAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1370
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1371,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 33
										}
									],
									"indexSignature": {
										"id": 1372,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1373,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1374,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/storage/allocate/types.ts",
														"line": 27,
														"character": 26
													}
												],
												"indexSignature": {
													"id": 1375,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1376,
															"name": "id",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1369,
														"name": "StateAllocation"
													}
												}
											}
										}
									}
								},
								{
									"id": 1377,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1380,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1379,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										},
										{
											"id": 1378,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1570,
												"name": "AstNode"
											}
										},
										{
											"id": 1381,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1832,
														"name": "StoragePointer"
													},
													{
														"type": "reference",
														"id": 1828,
														"name": "CodePointer"
													},
													{
														"type": "reference",
														"id": 1844,
														"name": "UnreadablePointer"
													},
													{
														"type": "reference",
														"id": 1838,
														"name": "ConstantDefinitionPointer"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1380,
												1379,
												1378,
												1381
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 40
										}
									]
								},
								{
									"id": 1359,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1361,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1365,
													"name": "StorageMemberAllocation"
												}
											}
										},
										{
											"id": 1360,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 1429,
												"name": "StorageLength"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1361,
												1360
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 34
										}
									]
								},
								{
									"id": 1362,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 35
										}
									],
									"indexSignature": {
										"id": 1363,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1364,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1359,
											"name": "StorageAllocation"
										}
									}
								},
								{
									"id": 1365,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1366,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1368,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 1832,
												"name": "StoragePointer"
											}
										},
										{
											"id": 1367,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1366,
												1368,
												1367
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 40
										}
									]
								},
								{
									"id": 1344,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 92,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 1345,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1346,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1138,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1347,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1348,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/storage/allocate/index.ts",
																	"line": 94,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 1349,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1350,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1617,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1351,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1352,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1362,
														"name": "StorageAllocations"
													}
												},
												{
													"id": 1353,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1371,
														"name": "StateAllocations"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"id": 1371,
												"name": "StateAllocations"
											}
										}
									]
								},
								{
									"id": 1341,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 63,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 1342,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1343,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1362,
												"name": "StorageAllocations"
											}
										}
									]
								},
								{
									"id": 1354,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 433,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1355,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1356,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1357,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1358,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1362,
														"name": "StorageAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1429,
												"name": "Storage.StorageLength"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1382
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1369,
										1371,
										1377,
										1359,
										1362,
										1365
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1344,
										1341,
										1354
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1393,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1394,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 24,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1395,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1396,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1397,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1832,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1398,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1404,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 85,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 1405,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1406,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 262,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1407,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1832,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1408,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1399,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 39,
											"character": 48
										}
									],
									"signatures": [
										{
											"id": 1400,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1401,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 262,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1402,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1795,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1403,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1394,
										1404,
										1399
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1409,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1410,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 19,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1411,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1412,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1884,
														"name": "Evm.WordMapping"
													}
												},
												{
													"id": 1413,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1427,
														"name": "Storage.Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1414,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 43,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1415,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1416,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1832,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1417,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1410,
										1414
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1324,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1336,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1337,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1338,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1427,
																"name": "Slot"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1339,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1427,
																"name": "Slot"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1325,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1326,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1327,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1429,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "size",
												"asserts": false,
												"targetType": {
													"type": "reflection",
													"declaration": {
														"id": 1328,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 1329,
																"name": "words",
																"kind": 1024,
																"kindString": "Property",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/storage/utils.ts",
																		"line": 9,
																		"character": 67
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"kind": 1024,
																"children": [
																	1329
																]
															}
														]
													}
												}
											}
										}
									]
								},
								{
									"id": 1333,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1334,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1335,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"id": 1427,
														"name": "Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1330,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1331,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1332,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1429,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1336,
										1325,
										1333,
										1330
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1418,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1419,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1423,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "StoragePosition"
									}
								},
								{
									"id": 1421,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 10,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1420,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 9,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"id": 1423,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "StoragePosition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1419,
										1421,
										1420
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 5,
									"character": 22
								}
							],
							"typeParameter": [
								{
									"id": 1422,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 787,
										"name": "Config"
									},
									"default": {
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								}
							]
						},
						{
							"id": 1423,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1425,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 17,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1424,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 16,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1427,
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "Slot"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1425,
										1424
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 13,
									"character": 32
								}
							],
							"typeParameter": [
								{
									"id": 1426,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 787,
										"name": "Config"
									},
									"default": {
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								}
							]
						},
						{
							"id": 1427,
							"name": "Slot",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 20,
									"character": 16
								}
							],
							"typeParameter": [
								{
									"id": 1428,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 787,
										"name": "Config"
									},
									"default": {
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "C"
											}
										],
										"name": "SlotBaseFields"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "literal",
												"value": "integerType"
											},
											"objectType": {
												"type": "reference",
												"name": "C"
											}
										},
										"objectType": {
											"type": "reference",
											"name": "SlotOffsetFields"
										}
									}
								]
							}
						},
						{
							"id": 1429,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 6,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1430,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1431,
													"name": "bytes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1431
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 27
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1432,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1433,
													"name": "words",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 55
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1433
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 47
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1340,
								1393,
								1409,
								1324
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1418,
								1423
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1427,
								1429
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/storage/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1231,
					"name": "Topic",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1232,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1233,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1234,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1235,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 67,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1236,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1821,
														"name": "Pointer.EventTopicPointer"
													}
												},
												{
													"id": 1237,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1887,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1238,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 974,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1233
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1239,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1240,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1241,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1242,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1240
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1240
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1243,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1244,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1245,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1246,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1821,
														"name": "Pointer.EventTopicPointer"
													}
												},
												{
													"id": 1247,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1244
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1232,
								1239,
								1243
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/topic/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1945,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 1946,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1947,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1948,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1949,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1945,
										"name": "UnknownUserDefinedTypeError"
									}
								}
							]
						},
						{
							"id": 1951,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 45,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1950,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 44,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1946
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1951,
								1950
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 43,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 965,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 967,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 542,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 966,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 538,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 968,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 548,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 268,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								967,
								966,
								968
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 532,
							"character": 28
						}
					],
					"typeParameter": [
						{
							"id": 969,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 925,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 930,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 309,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 929,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 304,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"id": 793,
											"name": "DefaultConfig"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 927,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 295,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 931,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 314,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 928,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 300,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 926,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 288,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								930,
								929,
								927,
								931,
								928,
								926
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 284,
							"character": 34
						}
					]
				},
				{
					"id": 937,
					"name": "BytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for a known\nclass returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 944,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If the contract created was a library, and was compiled with Solidity\n0.4.20 or later, this field will be included, which gives the address of\nthe created contract (checksummed).  This field will not be included\notherwise!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 493,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 943,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 486,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 941,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 477,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 940,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 473,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 942,
							"name": "immutables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Decodings for any immutable state variables the created contract contains.\nOmitted in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 482,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 970,
									"name": "StateVariable"
								}
							}
						},
						{
							"id": 938,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a BytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 464,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "bytecode"
							}
						},
						{
							"id": 939,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 468,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								944,
								943,
								941,
								940,
								942,
								938,
								939
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 460,
							"character": 33
						}
					]
				},
				{
					"id": 978,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 980,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 573,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 979,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 572,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								980,
								979
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 571,
							"character": 28
						}
					]
				},
				{
					"id": 892,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 896,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 143,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorEntry"
							}
						},
						{
							"id": 895,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 137,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"name": "C"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 897,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 147,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 894,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 132,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 898,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 152,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 893,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 128,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								896,
								895,
								897,
								894,
								898,
								893
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 122,
							"character": 36
						}
					],
					"typeParameter": [
						{
							"id": 899,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 961,
					"name": "EmptyFailureDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of empty return data from an unsuccessful\ncall, a reversion with no message."
					},
					"children": [
						{
							"id": 964,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 406,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 962,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EmptyFailureDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 397,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "failure"
							}
						},
						{
							"id": 963,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 401,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								964,
								962,
								963
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 393,
							"character": 37
						}
					]
				},
				{
					"id": 917,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 922,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 267,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 921,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 262,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"id": 793,
											"name": "DefaultConfig"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 919,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 253,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 924,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 276,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 920,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 258,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 918,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 246,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "event"
							}
						},
						{
							"id": 923,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 271,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								922,
								921,
								919,
								924,
								920,
								918,
								923
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 242,
							"character": 30
						}
					]
				},
				{
					"id": 884,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 888,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 100,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 887,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 95,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"name": "C"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 886,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 91,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 890,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 109,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 885,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 87,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "function"
							}
						},
						{
							"id": 889,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 104,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								888,
								887,
								886,
								890,
								885,
								889
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 81,
							"character": 33
						}
					],
					"typeParameter": [
						{
							"id": 891,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 981,
					"name": "LogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[decodeEvent]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 983,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 616,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 985,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 984,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given ID.  This is meant for\ninternal use by Truffle Debugger; you probably don't want to bother\nwith this option."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 622,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 982,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given name."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 610,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								983,
								984,
								982
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 606,
							"character": 27
						}
					]
				},
				{
					"id": 900,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 903,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 177,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackEntry"
									},
									{
										"type": "reference",
										"name": "ReceiveEntry"
									}
								]
							}
						},
						{
							"id": 902,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 172,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 904,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 181,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 905,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 186,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 901,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 168,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								903,
								902,
								904,
								905,
								901
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 162,
							"character": 32
						}
					],
					"typeParameter": [
						{
							"id": 906,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 932,
					"name": "ReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a collection of\nreturn values from a successful call."
					},
					"children": [
						{
							"id": 935,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded return values from the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 334,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"id": 793,
											"name": "DefaultConfig"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 936,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 339,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 933,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 326,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "return"
							}
						},
						{
							"id": 934,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 330,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								935,
								936,
								933,
								934
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 322,
							"character": 31
						}
					]
				},
				{
					"id": 954,
					"name": "RevertMessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a revert message.\nFor forward-compatibility, we do not assume that the revert message is\na string."
					},
					"children": [
						{
							"id": 956,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the error that was thrown.  You can use this\nto extract the name, for instance.  This may be spoofed for built-in\ntypes of errors."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 425,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorEntry"
							}
						},
						{
							"id": 959,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments passed to revert(); currently, this will\nalways contain just a single string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 442,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 965,
									"typeArguments": [
										{
											"type": "reference",
											"id": 793,
											"name": "DefaultConfig"
										}
									],
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 960,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 447,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 957,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the\nerror type, as a Format.Types.ContractType.  This will be `null` if the\nerror was defined outside of the contract or it's one of the builtin\n`Error(string)` or `Panic(uint)` types.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 433,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 955,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RevertMessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 419,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "revert"
							}
						},
						{
							"id": 958,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 437,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								956,
								959,
								960,
								957,
								955,
								958
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 415,
							"character": 38
						}
					]
				},
				{
					"id": 950,
					"name": "SelfDestructDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of unexpectedly empty return data from a\nsuccessful call, indicating that the contract self-destructed."
					},
					"children": [
						{
							"id": 953,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 385,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 951,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an SelfDestructDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 376,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "selfdestruct"
							}
						},
						{
							"id": 952,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 380,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								953,
								951,
								952
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 372,
							"character": 37
						}
					]
				},
				{
					"id": 970,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used for representing decoded state variables."
					},
					"children": [
						{
							"id": 972,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 69,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 971,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique\namong the contract's state variables."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 63,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 973,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 73,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 268,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								972,
								971,
								973
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 58,
							"character": 30
						},
						{
							"fileName": "decoder/lib/index.ts",
							"line": 159,
							"character": 15
						}
					]
				},
				{
					"id": 975,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 977,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 563,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 976,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 562,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								977,
								976
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 561,
							"character": 31
						}
					]
				},
				{
					"id": 945,
					"name": "UnknownBytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for an\nunknown class returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 949,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 523,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 948,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 519,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 946,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownBytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 510,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "unknownbytecode"
							}
						},
						{
							"id": 947,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 514,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								949,
								948,
								946,
								947
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 506,
							"character": 40
						}
					]
				},
				{
					"id": 907,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 910,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 210,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 909,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 206,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 908,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 201,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								910,
								909,
								908
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 195,
							"character": 36
						}
					],
					"typeParameter": [
						{
							"id": 911,
							"name": "_C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 912,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 915,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 234,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 914,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 230,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 879,
								"name": "DecodingMode"
							}
						},
						{
							"id": 913,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 225,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								915,
								914,
								913
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 219,
							"character": 40
						}
					],
					"typeParameter": [
						{
							"id": 916,
							"name": "_C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					]
				},
				{
					"id": 880,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 14,
							"character": 28
						}
					],
					"typeParameter": [
						{
							"id": 881,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 787,
								"name": "Config"
							},
							"default": {
								"type": "reference",
								"id": 793,
								"name": "DefaultConfig"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 884,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "FunctionDecoding"
							},
							{
								"type": "reference",
								"id": 892,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "ConstructorDecoding"
							},
							{
								"type": "reference",
								"id": 900,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "MessageDecoding"
							},
							{
								"type": "reference",
								"id": 907,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "UnknownCallDecoding"
							},
							{
								"type": "reference",
								"id": 912,
								"typeArguments": [
									{
										"type": "reference",
										"name": "C"
									}
								],
								"name": "UnknownCreationDecoding"
							}
						]
					}
				},
				{
					"id": 1942,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 16,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "contract"
							},
							{
								"type": "literal",
								"value": "library"
							},
							{
								"type": "literal",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 974,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 554,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 975,
								"name": "StorageRequest"
							},
							{
								"type": "reference",
								"id": 978,
								"name": "CodeRequest"
							}
						]
					}
				},
				{
					"id": 879,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 52,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "full"
							},
							{
								"type": "literal",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 985,
					"name": "ExtrasAllowed",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.",
						"text": "* `\"off\"`: Exclude extra decodings (the default).\n* `\"on\"`: Include extra decodings.\n* `\"necessary\"`: Include extra decodings only if there are no others.\n\nExtra decodings will always be returned after other decodings.\n"
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 598,
							"character": 25
						},
						{
							"fileName": "decoder/lib/index.ts",
							"line": 164,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "off"
							},
							{
								"type": "literal",
								"value": "on"
							},
							{
								"type": "literal",
								"value": "necessary"
							}
						]
					}
				},
				{
					"id": 1939,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "storage"
							},
							{
								"type": "literal",
								"value": "memory"
							},
							{
								"type": "literal",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 882,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 28,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 917,
								"name": "EventDecoding"
							},
							{
								"type": "reference",
								"id": 925,
								"name": "AnonymousDecoding"
							}
						]
					}
				},
				{
					"id": 1941,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "pure"
							},
							{
								"type": "literal",
								"value": "view"
							},
							{
								"type": "literal",
								"value": "nonpayable"
							},
							{
								"type": "literal",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 1943,
					"name": "PaddingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 21,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "permissive"
							},
							{
								"type": "literal",
								"value": "zero"
							},
							{
								"type": "literal",
								"value": "right"
							}
						]
					}
				},
				{
					"id": 1944,
					"name": "PaddingType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 30,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "left"
							},
							{
								"type": "literal",
								"value": "right"
							},
							{
								"type": "literal",
								"value": "signed"
							}
						]
					}
				},
				{
					"id": 883,
					"name": "ReturndataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a returndata (return value or revert message) decoding.\nAs you can see, these come in six types, each of which is documented\nseparately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 36,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 932,
								"name": "ReturnDecoding"
							},
							{
								"type": "reference",
								"name": "RawReturnDecoding"
							},
							{
								"type": "reference",
								"id": 937,
								"name": "BytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 945,
								"name": "UnknownBytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 950,
								"name": "SelfDestructDecoding"
							},
							{
								"type": "reference",
								"id": 954,
								"name": "RevertMessageDecoding"
							},
							{
								"type": "reference",
								"id": 961,
								"name": "EmptyFailureDecoding"
							}
						]
					}
				},
				{
					"id": 1940,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "internal"
							},
							{
								"type": "literal",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 986,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 303,
							"character": 37
						}
					],
					"signatures": [
						{
							"id": 987,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 988,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 880,
										"name": "CalldataDecoding"
									}
								},
								{
									"id": 989,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 880,
								"name": "CalldataDecoding"
							}
						}
					]
				},
				{
					"id": 990,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 330,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 991,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 992,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 882,
										"name": "LogDecoding"
									}
								},
								{
									"id": 993,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 882,
								"name": "LogDecoding"
							}
						}
					]
				},
				{
					"id": 994,
					"name": "abifyReturndataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 348,
							"character": 39
						}
					],
					"signatures": [
						{
							"id": 995,
							"name": "abifyReturndataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 996,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 883,
										"name": "ReturndataDecoding"
									}
								},
								{
									"id": 997,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 883,
								"name": "ReturndataDecoding"
							}
						}
					]
				},
				{
					"id": 854,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 54,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 855,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 856,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1887,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 857,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 974,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 880,
										"name": "CalldataDecoding"
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 849,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 202,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 850,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 851,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1887,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 852,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 853,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 981,
										"name": "LogOptions"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 974,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 882,
											"name": "LogDecoding"
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 858,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 592,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 859,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, returnmessage, failure, empty, bytecode, unknownbytecode\nMoreover, within \"revert\", builtin ones are put above custom ones"
							},
							"parameters": [
								{
									"id": 860,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1887,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 861,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1108,
												"name": "AbiData.Allocate.ReturndataAllocation"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								},
								{
									"id": 862,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 863,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 974,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 883,
											"name": "ReturndataDecoding"
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 864,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 905,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 865,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes the return data from a failed call.",
								"returns": "An array of possible decodings.  At the moment it's\n  impossible for there to be more than one.  (If the call didn't actually\n  fail, or failed in a nonstandard way, you may get no decodings at all, though!)\n\n  Decodings can either be decodings of revert messages, or decodings\n  indicating that there was no revert message.  If somehow both were to be\n  possible, they'd go in that order, although as mentioned, there (at least\n  currently) isn't any way for that to occur."
							},
							"parameters": [
								{
									"id": 866,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The returned data, as a Uint8Array."
									},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 883,
									"name": "ReturndataDecoding"
								}
							}
						}
					]
				},
				{
					"id": 843,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 36,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 844,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 845,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1570,
										"name": "Ast.AstNode"
									}
								},
								{
									"id": 846,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1795,
										"name": "Pointer.DataPointer"
									}
								},
								{
									"id": 847,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1887,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 848,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 974,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 268,
										"name": "Format.Values.Result"
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 2,
					"children": [
						1061,
						1445,
						1434,
						998,
						1037,
						1642,
						1633,
						1703,
						1759,
						1846,
						1921,
						45,
						1248,
						1256,
						1794,
						1286,
						1303,
						1323,
						1231
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								45
							]
						},
						{
							"title": "ABI data location",
							"children": [
								1061,
								1231
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1434,
								1248,
								1256,
								1286,
								1303,
								1323
							]
						},
						{
							"title": "Other",
							"children": [
								1445,
								998,
								1037,
								1642,
								1633,
								1703,
								1759,
								1846,
								1921,
								1794
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1945
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								1945
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						965,
						925,
						937,
						978,
						892,
						961,
						917,
						884,
						981,
						900,
						932,
						954,
						950,
						970,
						975,
						945,
						907,
						912
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								965,
								925,
								937,
								892,
								961,
								917,
								884,
								900,
								932,
								954,
								950,
								970,
								945,
								907,
								912
							]
						},
						{
							"title": "Requests",
							"children": [
								978,
								975
							]
						},
						{
							"title": "Inputs",
							"children": [
								981
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						880,
						1942,
						974,
						879,
						985,
						1939,
						882,
						1941,
						1943,
						1944,
						883,
						1940
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								880,
								879,
								882,
								883
							]
						},
						{
							"title": "Enumerations",
							"children": [
								1942,
								1939,
								1941,
								1943,
								1944,
								1940
							]
						},
						{
							"title": "Requests",
							"children": [
								974
							]
						},
						{
							"title": "Inputs",
							"children": [
								985
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						986,
						990,
						994,
						854,
						849,
						858,
						864,
						843
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								854,
								849,
								858,
								843
							]
						},
						{
							"title": "Decoding convenience",
							"children": [
								864
							]
						},
						{
							"title": "ABIfication",
							"children": [
								986,
								990,
								994
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "@truffle/decoder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, events, and return values and revert strings.  It's an interface to\nthe same low-level decoding functionality that Truffle Debugger uses.  However,\nit has additional functionality that the debugger does not need, and the\ndebugger has additional functionality that this decoder does not need.\n\nThe interface is split into three classes: The wire decoder, the contract\ndecoder, and the contract instance decoder.  The wire decoder is associated to\nthe project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the wire decoder, but in addition it acts as a factory for\ncontract instance decoders.  The contract instance decoder is associated to a\nspecific contract instance; it too has all the capabilities of the wire decoder,\nbut it can also decode the state variables for the specific instance.  (In\naddition, in the case that the contract does not include a `deployedBytecode`\nfield in its artifact, which can hinder decoding certain things, the contract\ninstance decoder can sometimes work around this where the other decoders\ncannot.)\n\nThis documentation describes the current state of the decoder, but you should\nexpect to see improvements soon.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a wire decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n[[forAddress|`forAddress`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn decoders from other decoders by supplying additional\ninformation.  See the documentation for the individual decoder classes for a\nmethod listing.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes, abification, and caveats\n\nThe decoder runs in either of two modes: full mode or ABI mode. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\nSee also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional\ncaveats about what may or may not be fully decodable.\n\n### Basic usage examples\n\n#### Decoding a log with the wire decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[WireDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[WireDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"originalName": "decoder/lib",
			"children": [
				{
					"id": 2239,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2240,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2241,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2242,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2243,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2244,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2239,
										"name": "ContractAllocationFailedError"
									}
								}
							]
						},
						{
							"id": 2247,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 63,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2246,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 62,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2245,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 61,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2240
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2247,
								2246,
								2245
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 60,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2221,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 2222,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2223,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2224,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2225,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2221,
										"name": "ContractBeingDecodedHasNoNodeError"
									}
								}
							]
						},
						{
							"id": 2227,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2226,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 8,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2222
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2227,
								2226
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 7,
							"character": 47
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1952,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractDecoder class.  Spawns the [[ContractInstanceDecoder]] class.\nAlso, decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 1953,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1954,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 1955,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1681,
												"name": "Contract"
											}
										},
										{
											"id": 1956,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1668,
												"name": "Compilation"
											}
										},
										{
											"id": 1957,
											"name": "wireDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2126,
												"name": "WireDecoder"
											}
										},
										{
											"id": 1958,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1952,
										"name": "ContractDecoder"
									}
								}
							]
						},
						{
							"id": 1967,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 774,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1895,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 1963,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 769,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractObject"
							}
						},
						{
							"id": 1961,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 767,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1668,
								"name": "Compilation"
							}
						},
						{
							"id": 1966,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 772,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1960,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 765,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1724,
								"name": "Contexts"
							}
						},
						{
							"id": 1962,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 768,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1681,
								"name": "Contract"
							}
						},
						{
							"id": 1965,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 771,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1964,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 770,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"id": 1570,
								"name": "AstNode"
							}
						},
						{
							"id": 1968,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 775,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1969,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 1970,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1971,
												"name": "selector",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1137,
											"name": "AbiData.Allocate.CalldataAndReturndataAllocation"
										}
									}
								}
							}
						},
						{
							"id": 1973,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 779,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1377,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 1972,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 778,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 1959,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 763,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 1974,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 781,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 2126,
								"name": "WireDecoder"
							}
						},
						{
							"id": 1977,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 881,
									"character": 21
								}
							],
							"getSignature": [
								{
									"id": 1978,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1727,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2010,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1051,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2011,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2012,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 880,
										"typeArguments": [
											{
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										],
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2013,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1058,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2014,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2015,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 882,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 882,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2016,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1065,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2017,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2018,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 883,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 883,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2003,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1028,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2004,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2005,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2302,
												"name": "Log"
											}
										},
										{
											"id": 2006,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2287,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 882,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1979,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 917,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 1980,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the return value of a call.  Return values can be ambiguous, so this so\nthis function returns an array of [[ReturndataDecoding|ReturndataDecodings]].\n\nNote that return values are decoded in strict mode, so none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n1. The decoded return value from a successful call.\n2. The decoded revert message from a call that reverted with a message.\n3. A decoding indicating that the call reverted with no message.\n4. A decoding indicating that the call self-destructed.\n\nYou can check the kind and field to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nDecoding creation calls with this method is not supported.  If you simply\nwant to decode a revert message from an arbitrary call that you know\nfailed, you may also want to see the [[decodeRevert]] function in\n`@truffle/codec`.\n"
									},
									"parameters": [
										{
											"id": 1981,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The abi entry for the function call whose return value is being decoded."
											},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 1982,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to be decoded, as a hex string (beginning with \"0x\")."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1983,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Additional options, such as the block the call occurred in.\n  See [[ReturnOptions]] for more information.\n"
											},
											"type": {
												"type": "reference",
												"id": 2284,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 883,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1984,
							"name": "decodeReturnValueWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 932,
									"character": 54
								}
							],
							"signatures": [
								{
									"id": 1985,
									"name": "decodeReturnValueWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 1986,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 1987,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1988,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2284,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 1989,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 883,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2000,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1016,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2001,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2002,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2290,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2007,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1042,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2008,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2009,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode them;\n  see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2278,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2268,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1990,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 991,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1991,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 1992,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2027,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2019,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1074,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2020,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1895,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 1993,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 997,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1994,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1995,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1996,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2025,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1095,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2026,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							]
						},
						{
							"id": 2021,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1081,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 2022,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1377,
											"name": "StateVariableAllocation"
										}
									}
								}
							]
						},
						{
							"id": 2023,
							"name": "getWireDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1088,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2024,
									"name": "getWireDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2126,
										"name": "WireDecoder"
									}
								}
							]
						},
						{
							"id": 1975,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 877,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 1976,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1997,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1004,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 1998,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1999,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1953
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1967,
								1963,
								1961,
								1966,
								1960,
								1962,
								1965,
								1964,
								1968,
								1973,
								1972,
								1959,
								1974
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								1977
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2010,
								2013,
								2016,
								2003,
								1979,
								1984,
								2000,
								2007,
								1990,
								2019,
								1993,
								2025,
								2021,
								2023,
								1975,
								1997
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 762,
							"character": 28
						}
					]
				},
				{
					"id": 2027,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions and logs.  See below for a method\nlisting.",
						"text": "Note that when using this class to decode transactions, logs, and return\nvalues, it does have one advantage over using the WireDecoder or\nContractDecoder.  If the artifact for the class does not have a\ndeployedBytecode field, the WireDecoder (and therefore also the\nContractDecoder) will not be able to tell that this instance is of that\nclass, and so will fail to decode transactions sent to it or logs\noriginating from it, and will fall back to ABI mode when decoding return\nvalues received from it.  However, the ContractInstanceDecoder has that\ninformation and will make use of it, making it possible for it to decode\ntransactions sent to this instance, or logs originating from it, or decode\nreturn values received from it in full mode, even if the deployedBytecode\nfield is misssing."
					},
					"children": [
						{
							"id": 2028,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2029,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2030,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1952,
												"name": "ContractDecoder"
											}
										},
										{
											"id": 2031,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								}
							]
						},
						{
							"id": 2042,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1139,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 1724,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2048,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1143,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1895,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2033,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1129,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1668,
								"name": "Compilation"
							}
						},
						{
							"id": 2040,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1136,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1638,
								"name": "CompilerVersion"
							}
						},
						{
							"id": 2039,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1135,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2041,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1138,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1724,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2034,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1130,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1681,
								"name": "Contract"
							}
						},
						{
							"id": 2037,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1133,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2038,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1134,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2053,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1152,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 1952,
								"name": "ContractDecoder"
							}
						},
						{
							"id": 2036,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1132,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2035,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1131,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"id": 1570,
								"name": "AstNode"
							}
						},
						{
							"id": 2050,
							"name": "internalFunctionsTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1146,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 1903,
								"name": "InternalFunctions"
							}
						},
						{
							"id": 2051,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1148,
									"character": 21
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1427,
									"typeArguments": [
										{
											"type": "reference",
											"id": 793,
											"name": "DefaultConfig"
										}
									],
									"name": "Slot"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 2043,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1141,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2044,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2045,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2046,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1617,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2049,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1145,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1377,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 2052,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1150,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							},
							"defaultValue": "..."
						},
						{
							"id": 2047,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1142,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2032,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1127,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2054,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1153,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 2126,
								"name": "WireDecoder"
							}
						},
						{
							"id": 2057,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1281,
									"character": 21
								}
							],
							"getSignature": [
								{
									"id": 2058,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1727,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2110,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1729,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2111,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2112,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 880,
										"typeArguments": [
											{
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										],
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2113,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1736,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2114,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2115,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 882,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 882,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2116,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1743,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2117,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2118,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 883,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 883,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2059,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1285,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2060,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2122,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1775,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2123,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2124,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2125,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 1427,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "Slot"
											},
											{
												"type": "reference",
												"id": 67,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "Type"
											}
										]
									}
								}
							]
						},
						{
							"id": 2101,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1693,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2102,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2103,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2302,
												"name": "Log"
											}
										},
										{
											"id": 2104,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2287,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 882,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2105,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1713,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2106,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ContractDecoder.decodeReturnValue]].\n\nIf the contract artifact is missing its bytecode, using this method,\nrather than the one in [[ContractDecoder]], can sometimes provide\nadditional decoding information.\n"
									},
									"parameters": [
										{
											"id": 2107,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2108,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2109,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2284,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 883,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2098,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1679,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2099,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]].\n"
									},
									"parameters": [
										{
											"id": 2100,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2290,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2061,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1301,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2062,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2063,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"name": "StateVariableAllocation"
											}
										},
										{
											"id": 2064,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 970,
												"name": "StateVariable"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2119,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1756,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2120,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[WireDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2121,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2278,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2268,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2075,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1467,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2076,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2077,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"name": "StateVariableAllocation"
									}
								}
							]
						},
						{
							"id": 2083,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1533,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2084,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2085,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2086,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2078,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1500,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2079,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2080,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2081,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 2082,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2055,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1197,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2056,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2087,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1540,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2088,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2089,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2065,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1369,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 2066,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2067,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2261,
												"name": "ContractState"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2094,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1647,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2095,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n\nThis function has the same caveats as watchMappingKey.\n"
									},
									"parameters": [
										{
											"id": 2096,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2097,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2071,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1449,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2072,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2073,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2074,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 268,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "Result"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2068,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1409,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2069,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw a [[ContractAllocationFailedError]].\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2070,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 970,
													"name": "StateVariable"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2090,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1605,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2091,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n**Warning**: At the moment, this function does very little to check its\ninput.  Bad input may have unpredictable results.  This will be remedied\nin the future (by having it throw exceptions on bad input), but right now\nessentially no checking is implemented.  Also, there may be slight changes\nto the format of indices in the future.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2092,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2093,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Numeric values can be given as number, BN, or\n  numeric string.  Bytestring values are given as hex strings.  Boolean\n  values are given as booleans, or as the strings \"true\" or \"false\".\n  Address values are given as hex strings; they are currently not required\n  to be in checksum case, but this will likely change in the future, so\n  don't rely on that.  Contract values work like address values.\n  Enum values can be given either as a numeric value or by name;\n  in the latter case you can use either a qualified name or just the\n  name of the option (i.e., you can just write `\"Option\"` rather than\n  `\"Enum.Option\"` or `\"Contract.Enum.Option\"`, but those will work too).\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2028
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2042,
								2048,
								2033,
								2040,
								2039,
								2041,
								2034,
								2037,
								2038,
								2053,
								2036,
								2035,
								2050,
								2051,
								2043,
								2049,
								2052,
								2047,
								2032,
								2054
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2057
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2110,
								2113,
								2116,
								2059,
								2122,
								2101,
								2105,
								2098,
								2061,
								2119,
								2075,
								2083,
								2078,
								2055,
								2087,
								2065,
								2094,
								2071,
								2068,
								2090
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1126,
							"character": 36
						}
					]
				},
				{
					"id": 2228,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 2229,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2230,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2231,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2232,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2233,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2234,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2228,
										"name": "ContractNotFoundError"
									}
								}
							]
						},
						{
							"id": 2238,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2236,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2235,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 26,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2237,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 28,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2229
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2238,
								2236,
								2235,
								2237
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 25,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2248,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2249,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2250,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2251,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2248,
										"name": "InvalidAddressError"
									}
								}
							]
						},
						{
							"id": 2252,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 84,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2249
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2252
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 83,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2258,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 2259,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2260,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2258,
										"name": "NoProjectInfoError"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2259
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 110,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2253,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 2254,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2255,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2256,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2253,
										"name": "VariableNotFoundError"
									}
								}
							]
						},
						{
							"id": 2257,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 97,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2254
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2257
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 96,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2126,
					"name": "WireDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The WireDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2127,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2128,
									"name": "new WireDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2129,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1668,
													"name": "Compilation"
												}
											}
										},
										{
											"id": 2130,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2126,
										"name": "WireDecoder"
									}
								}
							]
						},
						{
							"id": 2142,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 56,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1895,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2143,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							},
							"defaultValue": "..."
						},
						{
							"id": 2133,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 49,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1668,
									"name": "Compilation"
								}
							}
						},
						{
							"id": 2134,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 50,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1724,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2136,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 52,
									"character": 30
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 2135,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 51,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 1724,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2132,
							"name": "network",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 47,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2137,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 54,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2138,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2139,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2140,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1617,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2141,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 55,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2131,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 45,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2182,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 519,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2183,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2184,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 880,
										"typeArguments": [
											{
												"type": "reference",
												"id": 793,
												"name": "DefaultConfig"
											}
										],
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2185,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 531,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2186,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2187,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 882,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 882,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2188,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 544,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2189,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[ReturndataDecoding]], which may have been produced in full mode\nor ABI mode, and converts it to its ABI mode equivalent.  See the README\nfor more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2190,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 883,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 883,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2144,
							"name": "collectUserDefinedTypesAndTaggedOutputs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 194,
									"character": 49
								}
							],
							"signatures": [
								{
									"id": 2145,
									"name": "collectUserDefinedTypesAndTaggedOutputs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2146,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2147,
													"name": "definitions",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 195,
															"character": 15
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2148,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 2149,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 2150,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1617,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 2151,
													"name": "types",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 196,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"id": 264,
														"name": "TypesById"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2147,
														2151
													]
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 2166,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 398,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2167,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nChanging `options.extras = \"on\"` or `options.extras = \"necessary\"` will change the\nabove behavior; see the documentation on [[ExtrasAllowed]] for more.\n"
									},
									"parameters": [
										{
											"id": 2168,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded."
											},
											"type": {
												"type": "reference",
												"id": 2302,
												"name": "Log"
											}
										},
										{
											"id": 2169,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options for controlling decoding.\n"
											},
											"type": {
												"type": "reference",
												"id": 2287,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 882,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2170,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 408,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 2171,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2172,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2302,
												"name": "Log"
											}
										},
										{
											"id": 2173,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2278,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 2174,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 882,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2159,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 314,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2160,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2161,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2290,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2162,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 323,
									"character": 54
								}
							],
							"signatures": [
								{
									"id": 2163,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2164,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2290,
												"name": "Transaction"
											}
										},
										{
											"id": 2165,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 880,
												"typeArguments": [
													{
														"type": "reference",
														"id": 793,
														"name": "DefaultConfig"
													}
												],
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2175,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 460,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2176,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2177,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode\n  them; see the documentation on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"id": 2278,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2268,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2178,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 469,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 2179,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2180,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2278,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 2181,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2268,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2204,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 683,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2205,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the decoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 2206,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2207,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2027,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2197,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 584,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2198,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 2199,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1952,
												"name": "ContractDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2200,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 662,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2201,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 2202,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										},
										{
											"id": 2203,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance to decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2027,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2215,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 738,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2216,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1895,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2152,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 264,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 2153,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2154,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2155,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2191,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 552,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 2192,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2193,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2194,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										},
										{
											"id": 2195,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2196,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1724,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1727,
												"name": "Context"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2219,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 752,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2220,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1724,
										"name": "Contexts"
									}
								}
							]
						},
						{
							"id": 2208,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 724,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 2209,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2210,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2211,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2212,
														"name": "compilationId",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"id": 1617,
													"name": "Ast.AstNodes"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 2213,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 731,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2214,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							]
						},
						{
							"id": 2217,
							"name": "getWeb3",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 745,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2218,
									"name": "getWeb3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								}
							]
						},
						{
							"id": 2156,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 290,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2157,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2158,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2311,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2127
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2142,
								2143,
								2133,
								2134,
								2136,
								2135,
								2132,
								2137,
								2141,
								2131
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2182,
								2185,
								2188,
								2144,
								2166,
								2170,
								2159,
								2162,
								2175,
								2178,
								2204,
								2197,
								2200,
								2215,
								2152,
								2191,
								2219,
								2208,
								2213,
								2217,
								2156
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 44,
							"character": 24
						}
					]
				},
				{
					"id": 2261,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 2263,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2264,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 68,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2262,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 60,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 225,
								"typeArguments": [
									{
										"type": "reference",
										"id": 793,
										"name": "DefaultConfig"
									}
								],
								"name": "ContractType"
							}
						},
						{
							"id": 2266,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 76,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2265,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 72,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2263,
								2264,
								2262,
								2266,
								2265
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 56,
							"character": 30
						}
					]
				},
				{
					"id": 2287,
					"name": "DecodeLogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.decodeLog|decodeLog()]].\nThis type may be expanded in the future."
					},
					"children": [
						{
							"id": 2288,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 177,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 985,
								"name": "ExtrasAllowed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2288
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 171,
							"character": 33
						}
					]
				},
				{
					"id": 2268,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 2270,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2303,
								"name": "Log.address"
							}
						},
						{
							"id": 2276,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2309,
								"name": "Log.blockHash"
							}
						},
						{
							"id": 2277,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 300,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2310,
								"name": "Log.blockNumber"
							}
						},
						{
							"id": 2271,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2304,
								"name": "Log.data"
							}
						},
						{
							"id": 2269,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 92,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 882,
									"name": "LogDecoding"
								}
							}
						},
						{
							"id": 2273,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 283,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2306,
								"name": "Log.logIndex"
							}
						},
						{
							"id": 2272,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2305,
								"name": "Log.topics"
							}
						},
						{
							"id": 2275,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2308,
								"name": "Log.transactionHash"
							}
						},
						{
							"id": 2274,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2307,
								"name": "Log.transactionIndex"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2270,
								2276,
								2277,
								2271,
								2269,
								2273,
								2272,
								2275,
								2274
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 85,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2302,
							"name": "Log"
						}
					]
				},
				{
					"id": 2278,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.events|events()]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 2282,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 157,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2283,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 163,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 985,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 2280,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 144,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 2311,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2279,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 140,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2281,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 148,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 2311,
								"name": "BlockSpecifier"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2282,
								2283,
								2280,
								2279,
								2281
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 136,
							"character": 29
						}
					]
				},
				{
					"id": 2302,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 2303,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2309,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2310,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 300,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2304,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2306,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 283,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2305,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2308,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2307,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2303,
								2309,
								2310,
								2304,
								2306,
								2305,
								2308,
								2307
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 267,
							"character": 20
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 2268,
							"name": "DecodedLog"
						}
					]
				},
				{
					"id": 2312,
					"name": "ProjectInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a decoder for that project.  This information may\nbe passed in various ways; this type is given here as an interface rahter\nthan a union, but note that really you only need to include one of these\nfields.  (The `compilations` field will be used if present, then `artifacts`\nif not, etc.)  Further options for how to specify project information are\nintended to be added in the future."
					},
					"children": [
						{
							"id": 2314,
							"name": "artifacts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 41,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ContractObject"
								}
							}
						},
						{
							"id": 2313,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "An list of compilations, as specified in codec; this method of specifying\na project is mostly intended for internal Truffle use for now, but you can\nsee the documentation of the Compilations type if you want to use it."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 35,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1668,
									"name": "Compilation"
								}
							}
						},
						{
							"id": 2315,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's config object.  If present, and it has the\n`contracts_build_directory` property, the decoder will automatically read\nall the artifacts from there and use those as the project information.\nFurther, smarter use of the config object are intended to be added in\nthe future."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 49,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TruffleConfig"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2314,
								2313,
								2315
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 29,
							"character": 28
						}
					]
				},
				{
					"id": 2284,
					"name": "ReturnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[ContractDecoder.decodeReturnValue|decodeReturnValue()]]."
					},
					"children": [
						{
							"id": 2285,
							"name": "block",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block in which the call was made.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 188,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 2311,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2286,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, tells the decoder to interpret the return data as\nthe return data from a successful call (if `true` is passed) or\nas the return data from a failed call (if `false` is passed). If\nomitted or set to `undefined`, the decoder will account for both\npossibilities."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 196,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2285,
								2286
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 184,
							"character": 30
						}
					]
				},
				{
					"id": 2290,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 2293,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 221,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2294,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 225,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2296,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 233,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2300,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 250,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2299,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 246,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2291,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 213,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2301,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 254,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2292,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 217,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2297,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 238,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2295,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 229,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2298,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 242,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2293,
								2294,
								2296,
								2300,
								2299,
								2291,
								2301,
								2292,
								2297,
								2295,
								2298
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 209,
							"character": 28
						}
					]
				},
				{
					"id": 2311,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 317,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": "genesis"
							},
							{
								"type": "literal",
								"value": "latest"
							},
							{
								"type": "literal",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 40,
					"name": "forAddress",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 416,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 41,
							"name": "forAddress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike the other functions, this method doesn't require giving an\nartifact for the address itself; however, the address had better correspond to\na contract of a type given in the project info, or you'll get an exception."
							},
							"parameters": [
								{
									"id": 42,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 43,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 44,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forProject]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 7,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 230,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 8,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 9,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 10,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 11,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms; see the [[ProjectInfo]] documentation for more\n  information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.\n\n  If this latter option is used, one may omit `artifact` itself from the\n  list of artifacts and only include the *other* relevant artifacts; note\n  that omission this is not allowed when passing a `ProjectInfo`.\n\n  If this parameter is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1952,
										"name": "ContractDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 25,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 336,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 26,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 27,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 28,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 29,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 30,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 12,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 255,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 13,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 14,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 15,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1952,
										"name": "ContractDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 31,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 364,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 32,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 33,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 34,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 35,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 387,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 38,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 39,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 16,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 283,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 18,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 19,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 20,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 21,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 306,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 22,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 23,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 24,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2027,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 3,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 196,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 4,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a wire decoder for the project."
							},
							"parameters": [
								{
									"id": 5,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 6,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project or contracts being decoded.\n  This may come in several forms; see the [[ProjectInfo]] documentation for\n  more information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.  If this parameter\n  is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2312,
												"name": "ProjectInfo"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2126,
										"name": "WireDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2239,
						2221,
						1952,
						2027,
						2228,
						2248,
						2258,
						2253,
						2126
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								1952,
								2027,
								2126
							]
						},
						{
							"title": "Exception",
							"children": [
								2239,
								2221,
								2228,
								2248,
								2258,
								2253
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2261,
						2287,
						2268,
						2278,
						2302,
						2312,
						2284,
						2290
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2287,
								2278,
								2302,
								2312,
								2284,
								2290
							]
						},
						{
							"title": "Results",
							"children": [
								2261,
								2268
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2311
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2311
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						40,
						7,
						25,
						12,
						31,
						36,
						16,
						21,
						3
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								40,
								7,
								25,
								16,
								3
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								12,
								31,
								36,
								21
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				1,
				2
			]
		}
	]
}