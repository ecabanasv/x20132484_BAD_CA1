"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapBool = exports.Bool = exports.UnboxedNumber = exports.UnboxedString = exports.UnboxedBoolean = exports.BooleanFromString = exports.BooleanFromNumber = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:wrap:bool");
const t = __importStar(require("io-ts"));
const Utils = __importStar(require("./utils"));
exports.BooleanFromNumber = t.number
    .pipe(new t.Type("BooleanFromNumber", t.boolean.is, (input) => t.success(Boolean(input)), Number));
exports.BooleanFromString = t.string
    .pipe(new t.Type("BooleanFromString", t.boolean.is, (input) => t.success(Boolean(input) && input.toLowerCase() !== "false"), String));
exports.UnboxedBoolean = new t.Type("UnboxedBoolean", (input) => typeof input === "boolean", (input, context) => input instanceof Boolean
    ? t.success(input.valueOf())
    : t.failure(input, context), (input) => new Boolean(input));
exports.UnboxedString = new t.Type("UnboxedString", (input) => typeof input === "string", (input, context) => input instanceof String
    ? t.success(input.valueOf())
    : t.failure(input, context), (input) => new String(input));
exports.UnboxedNumber = new t.Type("UnboxedNumber", (input) => typeof input === "number", (input, context) => input instanceof Number
    ? t.success(input.valueOf())
    : t.failure(input, context), (input) => new Number(input));
exports.Bool = t.union([
    t.boolean,
    exports.BooleanFromString,
    exports.BooleanFromNumber,
    exports.UnboxedBoolean,
    exports.UnboxedString.pipe(exports.BooleanFromString),
    exports.UnboxedNumber.pipe(exports.BooleanFromNumber)
]);
const wrapBool = (dataType, input, _options) => {
    const codec = new t.Type("BoolValue", (input) => Utils.isWrappedResult(input) && input.type.typeClass === "bool" &&
        input.kind === "value", (input, context) => typeof input === "boolean"
        ? t.success({ type: dataType, kind: "value", value: { asBoolean: input } })
        : t.failure(input, context), (input) => input.value.asBoolean);
    return exports.Bool.pipe(codec).decode(input);
};
exports.wrapBool = wrapBool;
//# sourceMappingURL=bool.js.map